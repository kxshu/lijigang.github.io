<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>為學日益, 為道日損</title>
    <link>http://lijigang.github.io/</link>
    <description>static site generator</description>
    <pubDate>Tue, 19 Jul 2016 13:29:39 CST</pubDate>
    <lastBuildDate>Tue, 19 Jul 2016 13:29:39 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>互联网广告</title>
      <link>http://lijigang.github.io/blog/2016/07/19/互联网广告/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>互联网广告</h1>
            <p>
互联网发展至今, 主要的商业模式主要有三类: 广告, 游戏和电商. 很多互联网内容之所以可以免费访问, 除了边际成本极低这个特点以外, 主要原因就是这三类商业模式在支撑. 今天主要记录下广告这种模式的相关内容.
</p>

<p>
假设你是一个游戏达人, 有自己的网站, 平时主要分享一些游戏攻略和游戏介绍等信息. 你统计了一下自己网站的访问数据, 平均每个月有 10000 个人访问网站(UV, Unique Vistor),
一共访问了 100000 个页面(PV, Page View), 即 UV = 1,0000; PV = 100,000; 这时你每天都在支付流量费, 机房服务器的费用, 但并没有任何收入.
</p>

<p>
有一天, 广告主找过来, 想在你网站首部放一个 Banner, 展示广告主的产品信息, 每天给你
100 块钱, 先包一个月试试效果. 你接了下来, 这样你一个月就可以收入:
</p>

<div class="center">
<p>
100 元/天 * 30 天 = 3000 元
</p>
</div>

<blockquote>
<p>
这种按时间定价的结算方式即为 CPT(Cost per Time), 如果这里的时间是天计算的,可细化为 CPD(Cost per Day). 这种方式简单粗暴, 广告主和媒体方直接商定好每天价格和包断时长, 不管谁来访问网站都能在这个时间段内看到广告主指定的广告内容.
</p>

<p>
计算方式也很简单:
</p>

<p>
Revenue(收入) = Value(每时间价格) * Time(包断时长)
</p>
</blockquote>

<p>
但做为网站主, 你觉得可以再多挣些钱, 你与广告主沟通说, 我们再换一种结算方式吧. 不按点击次数来计费, 我们按展示次数来计费, 每展示 1 次页面就付费 0.05 元. 业内一般定价时使用每千次展示的价格, 在这个例子里, 即为每展示 1000 次页面就付费 50 元. 这样仍以之前的数据来算, 你将获得收入:
</p>

<div class="center">
<p>
Revenue = CPM * PV / 1000 = 50 元 * 100,000 / 1000 = 5000 元
</p>
</div>

<blockquote>
<p>
这种结算方式即为 CPM(Cost per Mille). 即每展示 1000 次页面, 能获得多少收入.
</p>
</blockquote>

<p>
上面两种 CPT 和 CPM 的结算方式, 与没有互联网之前的传统线下媒体广告结算方式类似,都属于是「合约广告」.
</p>

<p>
但上面这类的结算方式, 广告主是有意见的, 他们只知道广告费花出去了, 也给用户看到了,
但里面有多少生效了, 这些数据是无法统计到的. 他们提出要按效果计费,即当有人点击广告时, 才支付你费用, 如果只是展示给某个用户, 但该用户没有点击广告, 广告主是不需要支付任何费用的. 你也想尝试下该方式能不能多给你带来点收入. 于是就又签了一个月, 按点击次数计费. 每点击一次广告主支付你 0.5 元. 假如说访问人数和页面访问次数和之前统计数据保持不变, 广告一共被点击了 5000 次, 即
</p>

<p>
Clicks = 5000; UV = 1,0000; PV = 100,000; CTR = 5% (CTR, Click through Rate =
clicks / PV).
</p>

<p>
按之前的约定, 广告主共支付你:
</p>

<div class="center">
<p>
Revenue = Clicks * CPC = 5000 次点击 * 0.5 元/每次点击 = 2500 元
</p>
</div>

<blockquote>
<p>
这种按点击效果计费的结算方式即为 CPC(Cost per click), 在这个例子里, CPC = 0.5 元.
相比于 CPT, 这种方式对广告主来说明显更为靠谱些, 广告费都花在了对广告感兴趣的人群身上.
</p>
</blockquote>

<p>
随着移动互联网的蓬勃发展, 广告主从一开始的购买「曝光」, 到后来的购买「点击」, 越来越关注最核心的指标「ROI」, 即最终的转化率. 广告主又找到你沟通, 在 CPC 的基础上,
他们要再换一种更接近 ROI 指标的计费方式: CPA/CPS.
</p>

<blockquote>
<p>
CPA(Cost Per Action): 每次操作行为的价格. 「操作行为」各广告主可能会有不同的定义,
一般为「注册」, 「验证信息」等等. 即每当有一个用户从你网站的广告位下载了 APP, 并进行了「注册」行为, 广告主将给你支付一定金额.
</p>

<p>
CPS(Cost Per Sale): 每次交易行为的价格. 「交易行为」比如说每当有一个用户从你网站进入电商广告主网站购买了一件商品, 广告主会分你 5%. 再比如每当有一个游戏用户从你网站的广告位下载了游戏 APP, 如果他在里面进行了充值, 你将获得充值金额的 5%分成.
</p>
</blockquote>

<p>
对你这个网站主来说, 这么多的结算方式, 看起来很复杂, 而且广告的点击次数还需要到统计平台去看报表数据, 很是麻烦. 你想用一个统一的指标来估算自己网站流量的价值, 后续再有新的广告主过来, 你也知道该要多少价钱.
</p>

<p>
于是有了 eCPM (Effective cost per mille)这个指标, 可以用来统一的估量自己流量的商业价值:
</p>

<blockquote>
<p>
eCPM = (Revenue / PV) * 1000
</p>

<p>
Revenue = CPC * Clicks = CPC * (PV * CTR)
</p>

<p>
所以:
</p>

<p>
eCPM = CPC * CTR * 1000
</p>
</blockquote>

<p>
CPC 在一定时期内整个广告界内比较稳定, 要想提升广告收入, 就需要针对不同的人群, 做到精准展示广告, 提升 CTR, 从而提升 eCPM, 获得更多收益.
</p>

    </div>
</section>
]]></description>
      <pubDate>2016-07-19</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/互联网广告/</guid>
    </item>
    <item>
      <title>图解|读书: 技术简史</title>
      <link>http://lijigang.github.io/blog/2016/07/19/图解|读书-技术简史/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>图解|读书: 技术简史</h1>
            
<div class="figure">
<p><img src="/assets/blog/2016/07/19/图解|读书-技术简史/rulingwaves.png" alt="rulingwaves.png" />
</p>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-07-09</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/图解|读书-技术简史/</guid>
    </item>
    <item>
      <title>图解|读书: 游戏化实战</title>
      <link>http://lijigang.github.io/blog/2016/07/19/图解|读书-游戏化实战/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>图解|读书: 游戏化实战</h1>
            <p>
游戏中让人「欲罢不能」的元素如何应用在我们的工作和生活中?
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/图解|读书-游戏化实战/gamefication.png" alt="gamefication.png" />
</p>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-07-04</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/图解|读书-游戏化实战/</guid>
    </item>
    <item>
      <title>图解|概念: 逻辑</title>
      <link>http://lijigang.github.io/blog/2016/07/19/图解|概念-逻辑/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>图解|概念: 逻辑</h1>
            
<div class="figure">
<p><img src="/assets/blog/2016/07/19/图解|概念-逻辑/logic.jpg" alt="logic.jpg" />
</p>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-06-29</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/图解|概念-逻辑/</guid>
    </item>
    <item>
      <title>图解|概念: 学习</title>
      <link>http://lijigang.github.io/blog/2016/07/19/图解|概念-学习/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>图解|概念: 学习</h1>
            
<div class="figure">
<p><img src="/assets/blog/2016/07/19/图解|概念-学习/imgconcept-learn.jpg" alt="imgconcept-learn.jpg" />
</p>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-06-28</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/图解|概念-学习/</guid>
    </item>
    <item>
      <title>Computer Science 是什么鬼</title>
      <link>http://lijigang.github.io/blog/2016/07/19/computer-science-是什么鬼/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>Computer Science 是什么鬼</h1>
            <p>
作为一个学了七年 CS 的学渣, 一直没去了解过 CS 到底意味着什么. Computer Science 与其它
Science 的本质区别在哪? 它与其它 Science 的共同点又在哪? 直到最近读了=Problem
Solving with Algorithms and Data Structures= 这书后, 才开始去了解 CS 到底是什么鬼.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> What is CS?</h2>
<div class="outline-text-2" id="text-1">
<p>
<b><code>Computer Science</code> 就是一门专门研究 <code>Problems</code> 与 <code>Problem-solving</code> 的学科.</b>
</p>

<p>
面对一个 <code>问题</code>, 一个 <code>Computer Sciencist</code> 的目标就是找出一个 <code>算法</code> (即解决方案),明确指示出如何一步步地解决该问题.
</p>

<p>
当然, 这里还会涉及到 <b>可计算性</b> 的问题(P 与 NP), 面对不可计算的问题, 设计什么样的算法来满足解决问题的目标, 也是一个 CS 的研究内容.
</p>

<p>
一个计算机科学家在解决问题的过程中, 要多次进行抽象:
</p>

<ul class="org-ul">
<li>首先是对 <code>待解决的问题</code> 进行一次抽象
</li>
</ul>

<p>
现实世界里的问题一般都会包含比较多的条件, 把现实世界里的问题明确表示的过程中,不可避免地要进行一次抽象, 去掉无关的边缘条件, 保留该问题最核心的内容.
</p>

<ul class="org-ul">
<li>其实是对 <code>解决方案</code> 的抽象
</li>
</ul>

<p>
我们开车的时候, 踩一脚油门车就动了, 我们不需要去了解车是怎么打火的, 发动机是怎么运作的. 这种对解决方案的包装, 展示给最终用户的界面, CS 里叫 Interface, 现在互联网圈叫用户体验.
</p>

<p>
上述的过程, 可以用下图来表示:
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/computer-science-是什么鬼/cs.png" alt="cs.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> What is Programming?</h2>
<div class="outline-text-2" id="text-2">
<p>
<b><code>编程</code> 就是把 <code>算法</code> (问题的解决方案) 用某一种编程语言给表述出来的过程.</b>
</p>

<p>
也就是说, 编程的第一步是 <b>你已有某一问题的解决方案在手</b> , 没有 <code>算法</code> 就没有程序.
</p>

<p>
CS 不是研究如何编程的学科, 但编程, 却是一个 Computer Scientist 工作中的一个重要组成.
毕竟, CS 目标是 <b>解决问题</b> , 编程是把这个 <b>问题的解决方案</b> 给最终实现的基础操作,
重要性可想而知.
</p>

<p>
综合以上两部分, 总结一下计算机科学家的工作主要是:
</p>

<ol class="org-ol">
<li>把一个现实问题抽象, 用 <code>Data</code> 来表示
</li>
<li>针对该问题, 设计出相应的解决方案 <code>算法</code>
</li>
<li>把该 <code>算法</code> 用编程语言给表述出来 <code>程序</code>
</li>
<li>计算机运行该 <code>程序</code> , 从而解决现实问题
</li>
</ol>

<p>
把上面的步骤用图形化表示就是:
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/computer-science-是什么鬼/programming.png" alt="programming.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Programming Languages</h2>
<div class="outline-text-2" id="text-3">
<p>
编程语言提供了 <code>Data Structure</code> 和 <code>Control Structure</code>.
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Data Structure</h3>
<div class="outline-text-3" id="text-3-1">
<blockquote>
<p>

</p>

<p>
计算机只认识 <code>0</code> 和 <code>1</code>.
</p>
</blockquote>

<p>
相信每个 CS 都听过上面这句, 所有 Data 对应到计算机执行指令的时候都是 0 和 1, 但各个编程语言会对这些 01 串进行「包装」, 这样我们在使用这些语言的时候, 就可以从包装后的「砖块」层级来考虑如何把算法用该语言表述出来, 而不需要以 01 串的角度来思考.
</p>

<p>
各编程语言本身自带的这些对 01 串的「包装」叫做 <code>Primitive Data Types</code>. 可以理解为天赋属性. 语言好坏, 很多时候从这里就可以做一个区分了.
</p>

<p>
对于复杂的现实世界问题, 所有编程语言都不可能出厂时都「包装」好「砖块」让你砌墙.
所以后来才会有了 <code>Abstract Data Type</code> 的概念. 通过支持自定义类, 你可以自己去「包装」现实世界, 抽象数据类型出来, 想怎么玩就怎么玩.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Control Structure</h3>
<div class="outline-text-3" id="text-3-2">
<p>
有了数据结构, 我们可以表示现实世界中的问题了. 但仍需要更重要的一个东西来把我们的
<code>算法</code> 表述出来. 表述算法的语句就是 <code>Control Structure</code>.
</p>

<p>
语句控制可以大概分为三类:
</p>

<ol class="org-ol">
<li>Sequential Processing (顺序执行)
</li>
<li>Selection (选择分支执行)
</li>
<li>Iteration (重复执行)
</li>
</ol>

<p>
只要有了这三类语句控制, 我们就可以表述算法了. 剩下的工作就是把 <code>算法</code> 给翻译成这些语句的工作了, 也就是 <code>编程</code>.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Which language?</h2>
<div class="outline-text-2" id="text-4">
<p>
看完了上面的内容, 你还在纠结「哪个编程语言更好」吗?
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-06-13</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/computer-science-是什么鬼/</guid>
    </item>
    <item>
      <title>商业模式新生代</title>
      <link>http://lijigang.github.io/blog/2016/07/19/商业模式新生代/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>商业模式新生代</h1>
            
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 什么是商业模式?</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
商业模型是一个理论工具，它包含大量的商业元素及它们之间的关系，并且能够描述特定公司的商业模式。它能显示一个公司在以下一个或多个方面的价值所在：客户，公司结构，以及，以营利和可持续性盈利为目的，用以生产，销售，传递价值及关系资本的客户网。
</p>
</blockquote>

<p>
商业模式是工商业创造收入和利润的计划. 具体中间的各个环节之间是什么样的关系, 这些环节之间哪些更重要些, 这些问题都在这本书里找到了答案.
</p>

<p>
作者只用一张纸的内容, 把商业模式中最重要的几个部分给描述的一清二楚.
</p>

<p>
这书的核心内容就是下图, 书中主要是针对各部分进行了些介绍:
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/商业模式新生代/business_model_canvas.png" alt="business_model_canvas.png" />
</p>
</div>


<p>
但在实际应用过程中, 发现还是有些不太实用的地方, 比如「合作伙伴」这一条, 如果是一个初创企业, 其实很多时候是没有什么合作伙伴的, 空着那栏总感觉有些浪费.
</p>

<p>
很显然, 有类似感觉的人远不止我一个, 国外有个叫 Ash Maurya 的就在商业画布的基础上做了一些改进, 做出了下图, 并命名为 <a href="http://practicetrumpstheory.com/why-lean-canvas/">lean canvas</a>.
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/商业模式新生代/lean_canvas.png" alt="lean_canvas.png" />
</p>
</div>


<p>
我做了一个设想的项目商业画布做为试手, 结果如下图:
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/商业模式新生代/lean_canvas_example.png" alt="lean_canvas_example.png" />
</p>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-06-12</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/商业模式新生代/</guid>
    </item>
    <item>
      <title>神逻辑</title>
      <link>http://lijigang.github.io/blog/2016/07/19/神逻辑/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>神逻辑</h1>
            <blockquote>
<p>
「You can you up, no can no bb」.
</p>

<p>
「你知道他有多努力吗?」
</p>

<p>
「还说我不支持正版, 你就没有在网上下载过电影?」
</p>

<p>
&#x2026;&#x2026;
</p>
</blockquote>

<p>
如果你听到这些话, 总感觉哪里不对, 但又说出来个所以然的话, 推荐你读下<a href="https://book.douban.com/subject/26753478/">「神逻辑」</a> 这本书.
</p>

<p>
这书总共就 50 来页, 一共讲了 19 个常见的「逻辑谬误」, 每个谬误都用一页纸来说清楚, 并配一张插图说明.
</p>

<p>
需要先了解下逻辑学中的三个基本概念:
</p>

<p>
<code>命题</code>: 一个陈述, 或为真, 或为假, 但不能亦真亦假.
</p>

<p>
<code>论证</code>: 一组 <b>命题</b>  集合, 其目的是以推理说服他人.
</p>

<p>
<code>逻辑谬误</code>: 从一个 <b>命题</b>  推衍至下一个命题的过程中发生的错误, 最终导致错误的 <b>论证</b>.
</p>

<p>
书中介绍的 19 个逻辑谬误可以分为三大类:
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 形式谬误</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
因结构缺陷而导致论证不合逻辑的错误.
</p>

<p>
对于这类谬误, 只需要分析论证的形式, 就能发现错误. 不需要分析其内容.
</p>
</blockquote>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 肯定后件谬误</h3>
<div class="outline-text-3" id="text-1-1">
<p>
常用的论证形式之一是: 如果 A 则 C; A 成立, 因此 C 成立.
</p>

<p>
这里 A 被称为「前件」, C 被称为「后件」.
</p>

<p>
而 <code>肯定后件</code> 的形式谬误表现为: 如果 A 则 C; C 成立, 因此 A 成立.
</p>

<pre class="example">
如果那人是男人, 那人可以结婚.

但因那人可以结婚, 而推断那人是男人.  这就犯了肯定后件谬误.
</pre>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 否定前件谬误</h3>
<div class="outline-text-3" id="text-1-2">
<p>
该谬误表现为: 如果 A 则 C; A 不成立, 因此 C 也不成立.
</p>

<pre class="example">
如果那人是男人, 那人可以结婚.

但因那人不是男人, 而推断那人不可能结婚, 这就犯了否定前件谬误.
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 无关转移</h2>
<div class="outline-text-2" id="text-2">
<blockquote>
<p>
使论证偏离了最初的命题.
</p>
</blockquote>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 诉诸结果谬误</h3>
<div class="outline-text-3" id="text-2-1">
<p>
该谬误是指住所某观点 <b>如果</b> 成立(或不成立)所产生的结果好坏, 来判断一个观点是否正确.
</p>

<p>
但一个命题导致不利的结果, 并不意味着该命题就是假的. 因一个命题导致有利的结果, 也不意味着该命题就是真的.
</p>

<pre class="example">
上帝若不存在, 人们便能为所欲为.
</pre>

<p>
且不说人们是否真的会为所欲为, 就算果真如此, 也不能用来说明上帝的存在.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 诉诸恐惧谬误</h3>
<div class="outline-text-3" id="text-2-2">
<p>
该谬误是指利用听众的恐惧, 设想某命题若被接受将产生一个可怕的未来.
</p>

<pre class="example">
如果他当选了, 你们所有人都将失业.
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 诉诸潮流谬误</h3>
<div class="outline-text-3" id="text-2-3">
<p>
该谬误是指以许多人均相信某命题的事实为依据, 来证明该命题一定是真的.
</p>

<pre class="example">
太阳是地球转? 还是地球绕太阳转?
</pre>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> 罪恶关联谬误</h3>
<div class="outline-text-3" id="text-2-4">
<p>
该谬误是指通过指出某个被社会妖魔化的个人或群体也认同某观点, 以诋毁该观点.
</p>

<pre class="example">
我的对手主张, 应该在教育上投入更多的钱.

你们知道还有谁这么认为吗? 这个独裁者!
</pre>
</div>
</div>
<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> 稻草人谬误</h3>
<div class="outline-text-3" id="text-2-5">
<p>
该谬误是指有意地滑稽模仿他人论点, 以达到攻击模仿出来的论点而非实际论点的目的.
</p>

<p>
稻草人论点通常是歪曲、错误引用、曲解或将对方立场过分简单化, 更容易攻击这个修改后的论点.
</p>

<pre class="example">
达尔文说我们是从那些在树上摇来荡去的黑猩猩变过来的, 这真太可笑了.
</pre>

<p>
这是对进化生物学的一种扭曲, 进化论的实际陈述是: 人类和黑猩猩在数百万年前拥有共同的祖先.
</p>
</div>
</div>

<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6"><span class="section-number-3">2.6</span> 起源谬误</h3>
<div class="outline-text-3" id="text-2-6">
<p>
该谬误是指仅仅因为某观点的起源就贬低或维护它.
</p>

<pre class="example">
他当然支持那些罢工的工人, 说到底, 他们都是一个村子里的人.
</pre>
</div>
</div>

<div id="outline-container-sec-2-7" class="outline-3">
<h3 id="sec-2-7"><span class="section-number-3">2.7</span> 诉诸无关权威谬误</h3>
<div class="outline-text-3" id="text-2-7">
<p>
该谬误是指以其它领域无关权威的观点做为论据.
</p>

<pre class="example">
「风水盛行于古中国, 集合了古代中国人的智慧.」
</pre>
</div>
</div>

<div id="outline-container-sec-2-8" class="outline-3">
<h3 id="sec-2-8"><span class="section-number-3">2.8</span> 人身攻击谬误</h3>
<div class="outline-text-3" id="text-2-8">
<p>
该谬误是指通过攻击一个人本身, 而不是攻击其论点, 以转移讨论话题, 最终达到诋毁其论点的目的.
</p>

<pre class="example">
你又不是真正关心降低城市犯罪率, 你只是想要人们投票给你!
</pre>
</div>
</div>
<div id="outline-container-sec-2-9" class="outline-3">
<h3 id="sec-2-9"><span class="section-number-3">2.9</span> 诉诸虚伪谬误</h3>
<div class="outline-text-3" id="text-2-9">
<p>
该谬误是指通过指出某人的观点与其本人的行为或以往陈述相矛盾来反驳该观点.
</p>

<p>
也就是: 用指控来回答指挥, 把注意力从观点本身转移到提出观点的人身上.
</p>

<pre class="example">
A: 你干吗一直偷吃我的粥?

B: 你不也一直偷吃妈妈的蜂蜜?
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 非形式谬误</h2>
<div class="outline-text-2" id="text-3">
<blockquote>
<p>
因内容和语境而非形式, 导致论证不合逻辑的错误.
</p>
</blockquote>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 词义模糊谬误</h3>
<div class="outline-text-3" id="text-3-1">
<p>
该谬误是指利用语言的歧义, 在论证过程中通过改变词义来支持一个无事实根据的结论.
</p>

<pre class="example">
你隔天可以吃一次果酱, 但今天绝对不行, 因为「今天」不是「隔天」.
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 修改定义谬误</h3>
<div class="outline-text-3" id="text-3-2">
<p>
该谬误是指 A 对一组事物下了一般性的断言, B 提出证据质疑该断言, A 就通过修改该组事物成员的资格来回避该质疑.
</p>

<pre class="example">
A: 程序员都有社交障碍!
B: John 就是一个程序员, 他一点没有社交障碍.
A: John 并不是一个 *真正的程序员*
</pre>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 乱赋因果谬误</h3>
<div class="outline-text-3" id="text-3-3">
<p>
该谬误是指「后此即因此」以及「伴此即因此」.
</p>

<p>
后此即因此: 只因为事件 A 在事件 B 之前发生, 就被认为是 B 发生的原因.
</p>

<p>
伴此即因此: 只因为事件 A 和 B 同时发生, 就被认为是 B 发生的原因.
</p>

<pre class="example">
每当长夜将尽、破晓之前, 我在山顶呼唤太阳出现. 太阳总是如约而至.
</pre>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 滑坡谬误</h3>
<div class="outline-text-3" id="text-3-4">
<p>
该谬误是指: 试图证明接受某命题将无可避免地导致一系列事件, 且其中的一个或多个事件是不受欢迎的, 以此来诋毁该命题.
</p>

<p>
但实际上, 尽量这一系列事件 <b>有可能</b> 会发生, 但该论证假设每一步都是 <b>不可避免</b> 的, 却没有提供证据证明.
</p>

<pre class="example">
如果你允许一个陌生人进入你的前院, 第二天他就会登堂入室, 第三天他就会偷光你所有东西.
</pre>
</div>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> 虚假两难谬误</h3>
<div class="outline-text-3" id="text-3-5">
<p>
该谬误是指给出一个由两种范畴组成的有限集合, 并假设讨论范围内的一切事物都必须属于该集合. 因此, 拒绝其中一个范畴, 便只好接受另一个.
</p>

<pre class="example">
在这场战争中, 谁都不能置身事外. 你若不站在我这边, 就在敌人那边.
</pre>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> 合成&amp;分解 谬误</h3>
<div class="outline-text-3" id="text-3-6">
<p>
合成谬误是指从所有局部拥有某属性就推断出总体也一定具有该属性.
</p>

<p>
分解谬误是指只因总体拥有某属性, 就推断某局部也一定拥有该属性.
</p>

<pre class="example">
我们队所向披靡, 因此我们队的任何一名队员都能单挑赢另一队的任一球员!
</pre>
</div>
</div>
<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> 循环论证谬误</h3>
<div class="outline-text-3" id="text-3-7">
<p>
该谬误是指待证明的结论被含蓄或明白地置入了一个或多个前提中.
</p>

<pre class="example">
你完全错了, 因为你说的没有道理.
</pre>
</div>
</div>
<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> 轻率归纳谬误</h3>
<div class="outline-text-3" id="text-3-8">
<p>
访谬误是指当论证者从某样本得出结论, 而该样本太小或太特殊, 以至于缺乏代表性.
</p>

<pre class="example">
在大街上问题了十个人, 对国家税收的看法, 就评估说国家税收较轻.
</pre>
</div>
</div>

<div id="outline-container-sec-3-9" class="outline-3">
<h3 id="sec-3-9"><span class="section-number-3">3.9</span> 诉诸无知谬误</h3>
<div class="outline-text-3" id="text-3-9">
<p>
该谬误是指仅仅因为没有证据证明某命题是假的, 就认为它是真的.
</p>

<pre class="example">
没有令人信服的证据表明 UFO 从未拜访过地球, 因此, UFO 是存在的.
</pre>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-05-31</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/神逻辑/</guid>
    </item>
    <item>
      <title>科学是什么鬼</title>
      <link>http://lijigang.github.io/blog/2016/07/19/科学是什么鬼/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>科学是什么鬼</h1>
            <p>
我们总是会听到「这不科学」的说法, 那到底什么是「<a href="http://www.wikiwand.com/zh/%25E7%25A7%2591%25E5%25AD%25A6">科学</a>」?
</p>

<p>
在这里要先区分下 <code>科学</code> 与 <code>科学研究方法</code> 两个概念:
</p>

<ol class="org-ol">
<li>科学是探寻事物运作之明确规律的学科
</li>
<li>科学研究方法用胡适的话来说, 就是「大胆假设, 小心求证」.
</li>
</ol>

<p>
整个科学的发展史就是一部人类使用科学研究方法, 在现有基础上, 不断摸索着接近真理的纠正史. 也就是说, 科学从来不是一个「正确」的同意词, 它本身要求对科学理论要保持一定的怀疑态度.
</p>

<p>
这也从根本上导致了科学是一门动态发展的学科, 科学方法是一门不断优化人类认知这个世界的优良工具.
</p>

<p>
我试着用图表的形式展现这种科学发展方式:
</p>


<div class="figure">
<p><img src="/assets/blog/2016/07/19/科学是什么鬼/science.png" alt="science.png" />
</p>
</div>

    </div>
</section>
]]></description>
      <pubDate>2016-02-17</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/科学是什么鬼/</guid>
    </item>
    <item>
      <title>O2O与电子商务</title>
      <link>http://lijigang.github.io/blog/2016/07/19/o2o与电子商务/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>O2O与电子商务</h1>
            <p>
O2O与电子商务这两种商业模式是目前较为火爆和成熟的, 但对两者的定义与区别, 一直没搞明白. 最近几天看了点书, 也做了些思考, 在这里做个总结.
</p>

<p>
在整个商业活动过程中, 可以分为三个阶段:
</p>

<ol class="org-ol">
<li>营销
</li>
<li>交易
</li>
<li>服务体验
</li>
</ol>

<p>
在没有电子商务这种模式之前, 这三个阶段的活动在现实世界中, 被无数的商业钻研和实践着.
</p>

<p>
后来互联网产生, 首先出现了互联网营销这个新型的渠道, 给线下商家增加了一个新的增加流量的入口. 紧接着就是线上出现了很多的体验, 诸如在线视频(对应线下影院), 在线新闻(对应线下纸媒) 等等. 后来终于出现了电子支付功能, 线下的交易也被搬到线上.
</p>

<p>
在互联网这个虚拟世界里, 也有着独立的一套「营销→交易→服务体验」的商业活动.
</p>

<p>
但发展到这里, 线上的虚拟世界和线下的现实世界的两种商业活动, 基本上还是隔离状态. 后来随着互联网越来越成熟, 线上和线下发生了不可避免的融合, 出现了一些诸如线上交易, 线下体验(团购)的新型商业模式.
</p>

<p>
虚拟世界和现实世界的交互, 主要包含两个交界点:
</p>

<ol class="org-ol">
<li>现实世界 → 虚拟世界  (电子标签)
</li>
<li>虚拟世界 → 现实世界  (电子凭证)
</li>
</ol>

<p>
从现实世界到虚拟世界, 需要一个手段, 可以将实物的相关信息对应到虚拟世界中, 最佳方式为增强现实(AR)技术和NFC技术, 但因这种技术现在仍为普及, 目前可用技术中, 最为常用的手段即为 <b>二维码</b>.
</p>

<p>
从虚拟世界到现实世界, 也需要一个手段, 可以将支付后的这种状态真实可靠的告知到现实世界.
目前最为常用的手段也是 <b>二维码</b>.
</p>

<p>
这种新型商业模式, 即为O2O. 它有几种很鲜明的特点:
</p>

<ol class="org-ol">
<li>支付方式为在线支付
</li>
<li>服务体验一般为线下体验
</li>
<li>支付环节和服务体验环节一般不连续, 即先支付, 后在约定日期到店享受服务.
</li>
<li>当前阶段主要领域为「生活消费领域」, 一般涉及「客流」
</li>
</ol>


<p>
而电子商务的特点:
</p>
<ol class="org-ol">
<li>泛指电子支付的商业活动
</li>
<li>一般涉及「物流」
</li>
</ol>

    </div>
</section>
]]></description>
      <pubDate>2016-01-26</pubDate>
      <guid>http://lijigang.github.io/blog/2016/07/19/o2o与电子商务/</guid>
    </item>
  </channel>
</rss>