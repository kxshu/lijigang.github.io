<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>為學日益, 為道日損</title>
    <link>http://lijigang.github.io/</link>
    <description>static site generator</description>
    <pubDate>Thu, 02 Aug 2018 10:24:02 CST</pubDate>
    <lastBuildDate>Thu, 02 Aug 2018 10:24:02 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>哲学了没: 哲学到底是什么</title>
      <link>http://lijigang.github.io/blog/哲学了没-哲学到底是什么/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>哲学了没: 哲学到底是什么</h1>
            <blockquote>
<p>
人们出于对智慧的热爱所探究的问题, 可被视为「哲学问题」
</p>
</blockquote>

<p>
与其将哲学视为一门「学科」，不如说哲学是一门教导我们如何运用理性来思考的「方法」。理性可以有很多种，仅从目的而言，哲学最常使用的理性能力为「逻辑能力」。
</p>

<p>
通过观察，我们对各种事物及概念做出性质上的区别与分类，接着使用逻辑来做出论证。哲学理论的说服力奠基于逻辑论证之上，因此，想要学习哲学思考，必定要先了解如何建构一个符合逻辑的论证。
</p>

<p>
一般来说，哲学论证可以通过两种方法来呈现：演绎法（deduction）与归纳法（induction）。
</p>

<p>
西方哲学有三大基本问题: 形而上学, 知识论, 伦理学.
</p>

<div id="outline-container-org43eb24c" class="outline-2">
<h2 id="org43eb24c">形而上学</h2>
<div class="outline-text-2" id="text-org43eb24c">
<p>
形而上学又被称为「第一哲学」, 它是一门研究事物本质和基本原理的学问. 从古到今, 从来没有任何一个形而上学问题被解决.
</p>

<p>
典型的形而上学问题例如:
</p>
<ol class="org-ol">
<li>世界的本质是什么? 世界是由什么构成的?</li>
<li>上帝是否存在?</li>
<li>人类到底有没有自由意志?</li>
</ol>

<p>
因为对于形而上学探讨已久却无法获得任何真理，哲学家们分成了两派。其中一派哲学家认为，我们之所以没办法获得任何真理，原因在于形而上学问题的答案超越了人类的能力。我们的心智能力与认知能力都有极限，想获得形而上学的答案或者真理，对人类来说是不可能的。人类不可能获得关于世界的真理，就好像蚂蚁永远不可能理解三维空间的向度到底是什么。
</p>

<p>
另外一派哲学家则认为，形而上学问题根本就不是真正的问题，它只是一连串通过适当的文法与语词包装出来的句子，看起来好像真有这么一回事，实际上完全没有任何意义。
</p>
</div>
</div>

<div id="outline-container-orgaada79f" class="outline-2">
<h2 id="orgaada79f">知识论</h2>
<div class="outline-text-2" id="text-orgaada79f">
<p>
一直到了科学革命后，人们理解到这世界不像基督教或其他宗教所描述的那样，以前从教堂及传教士口中所获得的知识大多是假的，或者说，那些根本就不算知识。从教堂里获得知识的渠道已经崩溃，人们需要思考另外一种获得知识的途径，以及获得知识的方法。
</p>

<p>
试想一下, 你自己才能确认自己真的「知道」了上海现在正在下雨这个「知识」?
</p>

<p>
在哲学上，要说一个人拥有某项知识，初步看来要满足三个条件: 信念、事实、证据。
</p>

<p>
首先, 你得真的相信上海现在正在下雨; 其次, 上海现在正下雨得是件事实; 最后你相信上海在上雨的理由得充分.
</p>

<p>
要是你说你做梦梦到上海正在下雨, 所以就坚信这个. 那这是瞎蒙, 不叫掌握知识.
</p>
</div>
</div>

<div id="outline-container-orgcd9b614" class="outline-2">
<h2 id="orgcd9b614">伦理学</h2>
<div class="outline-text-2" id="text-orgcd9b614">
<p>
人是群居动物, 人与人之间必须要有所联系，有所关联。既然人际之间必须有所关联，自然
而然就会有一些大家共同遵守的规范产生。这些规范让人与人之间可以安定平稳地生活在一
起，一旦有人违背了规范，此人将在很大程度上面临他人的谴责及排斥。
</p>

<p>
除了这些规范，人类还倾向于追求其他的东西, 比如说真善美.
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-08-01</pubDate>
      <guid>http://lijigang.github.io/blog/哲学了没-哲学到底是什么/</guid>
    </item>
    <item>
      <title>商业化大杀器: 互联网广告</title>
      <link>http://lijigang.github.io/blog/商业化大杀器-互联网广告/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>商业化大杀器: 互联网广告</h1>
            <blockquote>
<p>
如果你只有时间看一本互联网广告相关的书, 就读 <code>计算广告</code> 吧.
</p>
</blockquote>

<p>
个人一直很喜欢读「通史」或「简史」类的书籍, 因为可以通过历史发展演化的角度来看待研究对象, 知道它是什么, 知道它从哪里来, 并可更好地猜测它会到哪里去.
</p>

<p>
但市面上一直没能找到一本和「互联网广告」相关的这类书籍, 直到 <code>刘鹏</code> 老师的「计算广告」一书发布. 之前能找到的大多是介绍互联网行业的一些角色相关和产业链相关的书籍, 从里面可以了解互联网广告相关的概念和大概的流程, 但始终是在隔靴搔痒.
</p>

<p>
作者在这本书中重点做了两件事: 一是描述了在线广告的发展历史, 以及介绍了在线广告的四种类别.  第二件事是介绍了在线广告产品的核心关键技术(并有相关代码片断).
</p>

<p>
那到底什么是 <code>广告</code> ?
</p>

<blockquote>
<p>
广告主: 出钱的人
</p>

<p>
媒体: 能接触用户的渠道
</p>

<p>
用户: 会使用或购买产品的群体
</p>

<p>
<b>广告即是广告主通过媒体向用户展示产品信息, 以达到自己推广目的(提升品牌印象或提升销量等)</b>
</p>
</blockquote>

<p>
在线广告区别与传统广告的最主要特点就是以人群为投放目标, 支持数据量化优化. 这也就是 <code>大数据</code> 这个概念在互联网广告领域可以风生水起的一个原因.
</p>

<p>
计算广告的核心问题就是:
</p>
<ol class="org-ol">
<li>针对一系列用户 (u = user)</li>
<li>在不同的上网环境(情景)中 (c = context)</li>
<li>找到最佳广告投放策略 (a = advertise)</li>
<li>从而优化广告投放利润 (P = profit)</li>
</ol>

<p>
利润就是收入减去成本, 在广告活动预算一定的情况下, 优化利润相当于优化收入.
</p>

<blockquote>
<p>
R(a, u, c) = eCPM
</p>

<p>
= CTR(a, u, c) * Value(a, u, c)
</p>

<p>
= CTR(a, u, c) * 到达率 * 转化率 * 客单价
</p>
</blockquote>


<p>
在线广告针对人群受众售卖的特点决定了 <b>受众定向</b> 是非常重要的技术. 在考察定向技术好坏的时候, 重点看两个东西: <b>质</b> 与 <b>量</b>.
</p>

<p>
质就是定向的效果, 你圈定的人群流量上面变现效率是不是高出平均eCPM.
</p>

<p>
量就是定向的规模, 你圈定的人群流量占整体广告流量的比例.
</p>

<p>
广告系统比较流行的定向方式包括:
</p>
<ol class="org-ol">
<li><p>
地域定向(geo-targeting)
</p>

<p>
分地域投放. 比如北京地区的鲜花速递公司, 只需要投放北京地区的受众, 其它地区的受众不需要接触.
</p></li>
<li><p>
人口属性定向(demographical targeting)
</p>

<p>
人中属性的标签主要标签包括: 年龄/性别/教育程度/收入水平等.
</p></li>
<li><p>
上下文定向(context targeting)
</p>

<p>
根据网页内容来匹配相关广告, 定向的粒度可以是关键词/主题/或者分类.
</p></li>
<li><p>
行为定向(behaviorial targeting)
</p>

<p>
根据用户的历史访问行为来了解用户, 推送相关广告. 这也就是互联网应用为什么喜欢收集用户行为数据的原因, 可以产生变现的价值. 也由此催生出了数据收集/加工/交易的衍生业务.
</p></li>
<li><p>
商圈定向(hyper-local targeting)
</p>

<p>
在移动设备上面投放广告时, 我们有可能获得非常精准的地理位置信息. 这使得针对具体商圈进行投放广告有了可能性.
</p></li>
<li><p>
重定向(retargeting)
</p>

<p>
对某个广告主过去一段时间内的访客投放广告, 提升转化效果. 这种方式的定向, 是被公认为精准程度最高, 效果最突出的方式, 缺点就是覆盖量较小.
</p></li>
<li><p>
新客推荐定向(look-alike targeting)
</p>

<p>
平台根据广告主提供的重定向种子访客信息, 结合广告平台丰富数据, 为广告主找到行为上相似的潜在客户.
</p></li>
</ol>

<div id="outline-container-org346a672" class="outline-2">
<h2 id="org346a672">在线广告类别</h2>
<div class="outline-text-2" id="text-org346a672">
<p>
作者把互联网广告分成了四个类别:
</p>
</div>

<div id="outline-container-org5767cb5" class="outline-3">
<h3 id="org5767cb5">合约广告</h3>
<div class="outline-text-3" id="text-org5767cb5">
<p>
主要包括两种方式:
</p>
<ol class="org-ol">
<li>CPT广告(按时段售卖)</li>
<li>CPM广告(按展示量售卖)</li>
</ol>

<p>
在互联网广告早期, 媒体和广告主(或广告代理)直接勾兑, 把线下广告的投放逻辑照搬到线上, 双方签订合同, 广告主买断指定时间段内的媒体广告位, 即按CPT的方式售卖.
</p>

<p>
后来演化出了按一次广告投放的展示总量和展示单价来签约, 即按CPM的方式售卖.
</p>

<p>
这两种售卖方式对应的广告系统, 其实只需要一个简单的广告排期系统即可.
</p>
</div>
</div>

<div id="outline-container-org98538a0" class="outline-3">
<h3 id="org98538a0">竞价广告</h3>
<div class="outline-text-3" id="text-org98538a0">
<p>
随着互联网广告行业的发展, 广告投放朝着精细化的方向不断前进. 交易模式也从原来的合约方式演进到了竞价方式. 不再像之前一样, 按时间段或批量售卖, 而是按不同的人群进行区分售卖, 价高者得. 这种模式同时还有一个好处, 即原来按合约售卖卖不掉的剩余流量, 现在也有可能通过竞价被售卖出去.
</p>

<p>
这种形式最主要的应用场景有两个: 一是搜索广告, 第二个是广告网络.
</p>

<p>
搜索广告因天生的搜索query词代表用户的搜索意图, 可以轻松区分出人群, 方便广告主竞价采买.
</p>

<p>
广告网络是指媒体方以页面上下文关键词或者访问人群的兴趣标签, 将人群做区分, 方便广告主竞价(或按合约)采买.
</p>
</div>
</div>

<div id="outline-container-org8b39c2e" class="outline-3">
<h3 id="org8b39c2e">程序化交易广告</h3>
<div class="outline-text-3" id="text-org8b39c2e">
<p>
市场的发展方向是向需求方彻底开放(毕竟是金主爸爸), 除了允许广告主按照媒体方或广告平台定义好的用户划分来购买以外, 进一步演化到了允许广告主自行选择流量和在每一次展示上独立出价, 参与竞价. 而这种方式, 就产生了以实时竞价(RTB)为核心的程序化交易市场.
</p>
</div>
</div>
<div id="outline-container-orgdb9d6a4" class="outline-3">
<h3 id="orgdb9d6a4">原生广告</h3>
<div class="outline-text-3" id="text-orgdb9d6a4">
<p>
在移动互联网时代到来之后, 屏幕较小的移动设备环境下, 独立展示和运营广告和内容遇到的挑战. 业务开始探讨将内容和广告混合的道路(Content as ad), 提升变现效率.
</p>

<p>
典型的如信息流广告, 搜索广告, 软文广告等等.
</p>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-07-16</pubDate>
      <guid>http://lijigang.github.io/blog/商业化大杀器-互联网广告/</guid>
    </item>
    <item>
      <title>公司在你眼中算什么?</title>
      <link>http://lijigang.github.io/blog/公司在你眼中算什么/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>公司在你眼中算什么?</h1>
            <p>
同样的半杯水放在面前, 不同的人会有不同的看法, 有说这杯里 <b>还有</b> 半杯水的, 有说这杯里 <b>只剩下</b> 半杯水的;
</p>

<p>
同样的街道和风景, 不同的人会有不同的感觉, 有说这里人文气息浓厚的, 有说这里和其它地方没有什么不一样的;
</p>

<p>
同样的公司, 同样的环境, 对于不同的人, 也会有截然不同的意义:
</p>


<div class="figure">
<p><img src="/assets/blog/公司在你眼中算什么/what-company-means.png" alt="what-company-means.png" align="center" />
</p>
<p><span class="figure-number">Figure 1: </span>对于公司的四种看法</p>
</div>


<div id="outline-container-org4a9258a" class="outline-2">
<h2 id="org4a9258a">战场</h2>
<div class="outline-text-2" id="text-org4a9258a">
<p>
对于自驱性强, 喜欢得到外部认可的人来说, 公司就是一个战场.
</p>

<p>
他踏进公司大门, 就是为了向前冲, 与人斗其乐无穷.
</p>

<p>
他最不能接受的就是 <code>猪队友</code> , 扯后腿, 不配合, 推卸责任这些情况, 他一遇到就会发毛!
</p>
</div>
</div>

<div id="outline-container-orge369374" class="outline-2">
<h2 id="orge369374">学校</h2>
<div class="outline-text-2" id="text-orge369374">
<p>
对于自我成长要求较高, 内心满足感较强的人来说, 公司就是另一个学校.
</p>

<p>
他进入这家公司, 就是为了成长进步, 公司业务好坏对他来说都不太重要, 只要自己获得了进步, 就是好的.
</p>

<p>
他最不能接受的就是 <code>停滞不前</code>, 没有新的东西输入, 让他拿已有能力持续输出, 对他来说是种煎熬.
</p>
</div>
</div>

<div id="outline-container-orgb30120c" class="outline-2">
<h2 id="orgb30120c">游乐场</h2>
<div class="outline-text-2" id="text-orgb30120c">
<p>
对于家底丰厚, 衣食无忧的人来说, 公司更像是一个游乐场.
</p>

<p>
他来公司, 更多是为了 <code>找点事做</code>, 不求业务多成功, 也不求收入有多高, 图一乐呵.
</p>

<p>
他不最能接受就是 <code>战场型队友</code>, 逼着他往前跑, 打断他的生活节奏, 经常会出现对着干的情况.
</p>
</div>
</div>

<div id="outline-container-org8e2e912" class="outline-2">
<h2 id="org8e2e912">秀场</h2>
<div class="outline-text-2" id="text-org8e2e912">
<p>
还有一种是喜欢成就感的人, 他把公司当做秀场.
</p>

<p>
他做事情, 喜欢摘果实. 做事情前, 先看这事利益有多大, 利益是不是归他所有.
</p>

<p>
他最不能接受就是 <code>果实被别人摘了</code>.
</p>
</div>
</div>

<div id="outline-container-orgd05e2fc" class="outline-2">
<h2 id="orgd05e2fc">结论</h2>
<div class="outline-text-2" id="text-orgd05e2fc">
<blockquote>
<p>
子曰：「君子和而不同，小人同而不和。」
</p>
</blockquote>

<p>
这种分类更多是 <code>世界观</code> 的 <b>不同</b>, 并没有 <b>对错</b> 之分.
</p>

<p>
下次当团队中有配合不顺时, 他可能不是对你这个人有意见, 也不是对你要沟通的事情有意
见, 而是大家对于公司的定位有区别.
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-06-10</pubDate>
      <guid>http://lijigang.github.io/blog/公司在你眼中算什么/</guid>
    </item>
    <item>
      <title>神器Org-mode</title>
      <link>http://lijigang.github.io/blog/神器org-mode</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>神器Org-mode</h1>
            <blockquote>
<p>
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
</p>
</blockquote>

<p>
Emacs中的 Org mode 是目前接触过的笔记管理, GTD管理以及时间记录相关的最好解决方案.
这篇文章想换种思路, 不再像其它介绍Org-mode的文章一样罗列Orgmode的一大堆功能点,
而是从使用需求出发, 一点点介绍Orgmode是如何满足这些需求的.
</p>

<p>
现在想象你打开了Emacs中的一个org文件, 想使用它做GTD管理. 首先会问: orgmode中如何
罗列一项项的Task?
</p>

<p>
答案很简单: 使用 <b>Headlines</b>.
</p>

<p>
什么是 <b>Headlines</b> ? 很简单, 使用 <code>*</code> 符号开头, 空格， 输入标题就行, 比如: 
</p>

<p class="verse">
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;* Top level headline<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<b>* Second level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;**</b> 3rd level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;some text<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<b>*</b> 3rd level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;more text<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;* Another top level headline<br />
<br />
</p>

<p>
看着好多 <code>**</code> 符号觉得干扰视觉? 没问题, 只需要设置
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-hide-leading-stars t)
</pre>
</div>

<p>
好, 现在有了列表了. 这些Task的状态是不是可以变化? 比如「待办」「进行中」「已完成」
等?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 设置todo keywords
(setq org-todo-keywords
      '((sequence "TODO" "HAND" "|" "DONE")))
</pre>
</div>

<p>
状态关键词你自己随便定义即可, 中间流转状态根据你的实际流程来定制. 状态变更, 只需
要在Task上面按 <code>t</code> 键, 就会按你设置的状态顺序变化.
</p>

<p>
好, 现在有了列表, 也有了状态变化, 那个状态字段和任务名称并排显示, 能不能把状态值
做个样式区分, 看着更显眼些?
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 调试好久的颜色，效果超赞！ todo keywords 增加背景色
(setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                ("HAND" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))
</pre>
</div>

<p>
好, 看着还不错. 但显示的 <code>*</code> 很不个性, 这个能定制修改吗?
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 设置bullet list
(setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))
</pre>
</div>

<p>
不错不错, 但在一个任务下面输入一段文字, 怎么是顶格的, 能不能让它自动缩进对齐?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 打开org-indent mode
(setq org-startup-indented t)
</pre>
</div>

<p>
一个Task怎么设置计划开始时间和Deadline?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">调用 org-schedule 和 org-deadline 函数

他们的快捷键 ,s 和 ,d
</pre>
</div>

<p>
那一个任务又是怎么计时的? 我想知道我在某一任务上面花了多少时间.
</p>
<pre class="example">
调用 org-clock-in 和 org-clock-out 函数

他们的快捷键 ,I 和 ,O

这俩函数就像秒表一样, 开始时打一个点, 结束时打一个点, 经历时间会自动计算显示出来.
</pre>

<p>
任务完成后, 还一直停留在当前文件中, 时间久了任务列表特别长. 对于完成的任务, 怎么归档存储?
</p>

<pre class="example">
调用 org-archive-subtree 函数, 对应的快捷键是 &lt;space o d&gt;

</pre>

<p>
怎么调整字体样式? 加粗? 斜体?
</p>

<pre class="example">
加粗 *test*
斜体 /test/
下划线 _test_
删除线 +test+
代码块 =test=
</pre>

<p>
有些时候, 需要在Task下面描述一些事项, Orgmode怎么显示 <code>plain lists</code> 列表? 
</p>

<pre class="example">
1. 这是有数字列表
2. 第二项
3. 第三项

</pre>

<pre class="example">
- 这是无数字列表
- 第二项
- 第三项
</pre>

    </div>
</section>
]]></description>
      <pubDate>2018-05-31</pubDate>
      <guid>http://lijigang.github.io/blog/神器org-mode</guid>
    </item>
    <item>
      <title>从零开始配置Spacemacs</title>
      <link>http://lijigang.github.io/blog/从零开始配置spacemacs/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>从零开始配置Spacemacs</h1>
            <p>
在我看来，在编辑操作领域，没有比Vim更高效的操作方式了。在文档存储和知识管理相关的软件使用上面，没有比Org-Mode更牛逼的存在了。
</p>

<p>
之前一直很纠结，既放不下Vim的高效编辑方式，又不放下Emacs里的Org-mode。直到遇到了Spacemacs：
</p>

<blockquote>
<p>
Spacemacs = Vim + Emacs
</p>
</blockquote>

<p>
这篇文章，就记录一下自己是怎么从零开始配置一个符合自己使用习惯的Spacemacs。
</p>

<div id="outline-container-org659bd12" class="outline-2">
<h2 id="org659bd12"><span class="section-number-2">1</span> 安装</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>安装 <a href="https://emacsformacosx.com/">Emacs</a></li>
<li>Clone Spacemacs</li>
</ol>
<pre class="example">
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
</pre>

<p>
clone完成后，会多两个东西，
</p>
<ul class="org-ul">
<li><code>~/.emacs.d/</code></li>
<li><code>~/.spacemacs</code></li>
</ul>
</div>
</div>

<div id="outline-container-org7b66043" class="outline-2">
<h2 id="org7b66043"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
安装完成后，对于常规的配置，可以放置到 <code>~/.spacemacs</code> 文件中，就像Vim和Zsh一样。 但Spacemacs提供了 <a href="http://spacemacs.org/doc/LAYERS.html">layer</a> 概念，极大方便了插件的管理.
</p>

<p>
下面分为两部分来配置， 首先把一些简单的配置放置到 <code>~/.spacemacs</code> 文件中：
</p>
</div>

<div id="outline-container-org5d5cedc" class="outline-3">
<h3 id="org5d5cedc"><span class="section-number-3">2.1</span> .spacemacs</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><p>
layers
</p>

<p>
在 <code>dotspacemacs-configuration-layers</code> 变量中增加你想配置的layer(Spacemacs出厂自带的或者是你后续自己创建的）
</p></li>
</ul>
<div class="org-src-container">
<pre class="src src-Emacs-lisp">dotspacemacs-configuration-layers
'(
  helm
  auto-completion
  better-defaults
  emacs-lisp
  git
  org
  )
</pre>
</div>

<ul class="org-ul">
<li>themes
可以从 <a href="https://themegallery.robdor.com/">这里</a> 挑选你喜欢的主题，把名字放到配置的第一个即可。</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-themes '(monokai
                      molokai
                      niflheim)
</pre>
</div>

<ul class="org-ul">
<li>fullscreen</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-fullscreen-at-startup t
</pre>
</div>

<p>
在dotspacemacs/user-config函数中配置：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  ;;;;;;;;;;;;;;;;;;;;;;;
  ;; org-mode 相关设置 ;;
  ;;;;;;;;;;;;;;;;;;;;;;;

  ;; Since version 0.104, spacemacs uses the org version from the org ELPA
  ;; repository instead of the one shipped with emacs. Then, any org related
  ;; code should not be loaded before dotspacemacs/user-config, otherwise both
  ;; versions will be loaded and will conflict. Because of autoloading, calling
  ;; to org functions will trigger the loading up of the org shipped with emacs
  ;; which will induce conflicts. One way to avoid conflict is to wrap your org
  ;; config code in a with-eval-after-load block like this:
  (with-eval-after-load 'org
    ;; 设置todo keywords
    (setq org-todo-keywords
          '((sequence "TODO" "HAND" "|" "DONE")))

    ;; 调试好久的颜色，效果超赞！ todo keywords 增加背景色
    (setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                   ("HAND" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                   ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))

    ;; 设置bullet list
    (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))

    ;; 打开org-indent mode
    (setq org-startup-indented t)

    (setq org-agenda-include-diary nil)
    (setq org-agenda-files (list  "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org"
                                  "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org_archive"))

    (setq org-default-notes-file "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org")
    (setq org-refile-targets '("~/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org" :maxlevel . 3))
    )

  ;;;;;;;;;;;;;;
  ;; 显示相关 ;;
  ;;;;;;;;;;;;;;

  ;; 在状态栏显示时间
  (display-time-mode 1)

  ;; 折叠时不再显示「...」
  (setq org-ellipsis "▼")

  ;; inline image 不用展示实际大小，可以自定义大小显示
  (setq org-image-actual-width nil)

  (global-hl-line-mode -1)

  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '("" " 為學日益, 為道日損 - "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name)) "%b"))))
  ;;;;;;;;;;;;;;
  ;; 导出相关 ;;
  ;;;;;;;;;;;;;;

  ;; 安装XeLaTeX是另外一个故事了..
  (setq Tex-command-default "XeLaTeX")


  ;;;;;;;;;;;;;;
  ;; 其它杂项 ;;
  ;;;;;;;;;;;;;;

  (setq default-major-mode 'org-mode)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

  (setq org-hierarchical-todo-statistics nil)

  ;; stop emacs asking for confirmation when eval source code
  (setq org-confirm-babel-evaluate nil)

  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (plantuml . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/lib/plantuml.jar"))
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-org3bd1f9a" class="outline-3">
<h3 id="org3bd1f9a"><span class="section-number-3">2.2</span> private layer</h3>
<div class="outline-text-3" id="text-2-2">
<p>
首先把自己layer中想要的packages给列好, 并设置相应的启动配置项:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst lijigang-packages
  '(org-page
    cnfonts
    swiper
    wttrin
    beacon)
)

(defun lijigang/init-org-page()
  "Initialize org-page to publish blog."
  (use-package org-page
    :ensure t
    :config (progn
          (setq op/site-main-title "為學日益, 為道日損")
          (setq op/personal-github-link "https://github.com/lijigang")
          (setq op/repository-directory "~/lijigang")
          (setq op/site-domain "http://lijigang.github.io/")
          (setq op/theme-root-directory "~/.emacs.d/elpa/org-page-20170806.1924/themes")
          (setq op/theme 'ljg)
          (setq op/highlight-render 'js)
          (setq op/category-config-alist
            '(("blog"
              :show-meta t
              :show-comment t
              :uri-generator op/generate-uri
              :uri-template "/blog/%t/"
              :sort-by :date     ;; how to sort the posts
              :category-index nil) ;; generate category index or not
              ("index"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/"
              :sort-by :date
              :category-index nil)
              ("about"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/about/"
              :sort-by :date
              :category-index nil)))
          (bind-key "C-c M-p" 'op/do-publication-and-preview-site)))
    )

(defun lijigang/init-cnfonts()
  "Initialize cnfonts"
  (use-package cnfonts
    :init
    (cnfonts-enable)
    (cnfonts-set-spacemacs-fallback-fonts)))

(defun lijigang/init-swiper()
  "Initialize swiper"
  (use-package swiper
    :init
    (define-key global-map (kbd "C-s") 'swiper)))


(defun lijigang/init-wttrin()
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("Beijing"
                                  "Bristol")))
  )

(defun lijigang/init-beacon()
  "Initialize beacon"
  (use-package beacon
    :init
    (beacon-mode 1)
    (setq beacon-color "#666600")))

;;; packages.el ends here

</pre>
</div>

<p>
然后把自己定义的一些函数放到 <code>funcs.el</code> 文件:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun make-progress (width percent has-number?)
  (let* ((done (/ percent 100.0))
         (done-width (floor (* width done))))
    (concat
     "["
     (make-string done-width ?/)
     (make-string (- width done-width) ? )
     "]"
     (if has-number? (concat " " (number-to-string percent) "%"))
     )))

(defun insert-day-progress ()
  (interactive)
  (let* ((today (time-to-day-in-year (current-time)))
         (percent (floor (* 100 (/ today 365.0)))))
    (insert (make-progress 30 percent t))
    ))

;; latex支持中文
(require 'ox)
(require 'ox-html)
(require 'ox-publish)

(add-to-list 'org-latex-classes '("pdf" "\\documentclass[fontset = mac]{ctexart}
[NO-DEFAULT-PACKAGES]
\\usepackage[colorlinks,linkcolor=black,anchorcolor=black,
             citecolor=black]{hyperref}
\\usepackage[top=3truecm,bottom=2.5truecm,
            left=1.1truecm,right=1.1truecm,
            bindingoffset=1.0truecm,
            headsep=1.6truecm,
            footskip=1.5truecm,
            headheight=15pt    % 标准中没有要求页眉的高度，这里设置成
                               % 15pt了
           ]{geometry}
"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-default-class "pdf")

(setq org-latex-pdf-process
      '(
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex auto"
        ))

(defun peng-use-xelatex ()
  (interactive)
  (let* ((tempfile
      (file-name-base))) (progn (shell-command (concat "rm -rf " tempfile
                               ".bbl " tempfile ".blg " tempfile ".out " tempfile ".log " tempfile
                               ".aux " tempfile ".toc" tempfile ".pdf"))
                    (compile (concat "xelatex "
                             (concat tempfile ".tex")
                             (concat ";rm -rf " tempfile ".bbl " tempfile
                                 ".blg " tempfile ".out " tempfile ".log " tempfile ".aux " tempfile
".toc" ";open " tempfile ".pdf"))))))

</pre>
</div>

<p>
之后把自己使用的一些快捷键设置放到 <code>keybindings.el</code> :
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(evil-leader/set-key "oc" 'org-capture)
(evil-leader/set-key "oa" 'org-agenda)
(evil-leader/set-key "ol" 'org-store-link)
(evil-leader/set-key "el" 'eval-print-last-sexp)
(evil-leader/set-key "od" 'org-archive-subtree)

(evil-leader/set-key "oip" 'org-set-property)
(evil-leader/set-key "oil" 'org-insert-link)
(evil-leader/set-key "ois" 'org-time-stamp)
(evil-leader/set-key "oid" 'org-insert-drawer)
(evil-leader/set-key "oif" 'org-footnote-action)

(evil-leader/set-key "oog" (lambda () (interactive) (find-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org")))
(evil-leader/set-key "ool" (lambda () (interactive) (find-file "/Users/ljg/.spacemacs.d/layers/lijigang/keybindings.el")))

(evil-leader/set-key "oit" 'insert-day-progress)

(global-set-key (kbd "C--") 'org-table-insert-hline)

(global-set-key
 (kbd "C-c p")
 (defhydra hydra-blog (:color blue :hint nil)
   "
    blog  _n_: new post                        _l_: publish last commit
          _r_: reset &amp; publish all             _p_: publish interactively
          _t_: reset &amp; publish to /tmp/blog    _e_: new-repository
          "
   ("n" op/new-post)
   ("r" (progn
          (setq op/item-cache nil)
          (op/do-publication t nil nil t t)))
   ("t" (progn
          (setq op/item-cache nil)
          (op/do-publication t "/tmp/blog" nil t nil)))
   ("l" (op/do-publication nil "HEAD~1" nil t t))
   ("p" op/do-publication)
   ("e" op/new-repository)))

</pre>
</div>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-05-29</pubDate>
      <guid>http://lijigang.github.io/blog/从零开始配置spacemacs/</guid>
    </item>
    <item>
      <title>使用Org-Page搭建网站</title>
      <link>http://lijigang.github.io/blog/使用org-page搭建网站/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>使用Org-Page搭建网站</h1>
            
<div id="outline-container-org82efd3e" class="outline-2">
<h2 id="org82efd3e">安装 Org-Page</h2>
<div class="outline-text-2" id="text-org82efd3e">
<p>
使用 <code>Spacemacs</code> 安装Org-Page极其方便. 只需要在自己的layer中增加org-age即可:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst lijigang-packages
  '(org-page
    cnfonts
    swiper
    wttrin
    beacon)
)
</pre>
</div>
</div>
</div>

<div id="outline-container-org04060c2" class="outline-2">
<h2 id="org04060c2">配置 Org-Page</h2>
<div class="outline-text-2" id="text-org04060c2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun lijigang/init-org-page()
  "Initialize org-page to publish blog."
  (use-package org-page
    :ensure t
    :config (progn
          (setq op/site-main-title "為學日益, 為道日損")
          (setq op/personal-github-link "https://github.com/lijigang")
          (setq op/repository-directory "~/lijigang")
          (setq op/site-domain "http://lijigang.github.io/")
          (setq op/theme-root-directory "~/.emacs.d/elpa/org-page-20170806.1924/themes")
          (setq op/theme 'ljg)
          (setq op/personal-google-analytics-id "UA-49533446-2")
          (setq op/highlight-render 'js)
          (setq op/category-config-alist
            '(("blog"
              :show-meta t
              :show-comment t
              :uri-generator op/generate-uri
              :uri-template "/blog/%t/"
              :sort-by :date     ;; how to sort the posts
              :category-index nil) ;; generate category index or not
              ("index"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/"
              :sort-by :date
              :category-index nil)
              ("about"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/about/"
              :sort-by :date
              :category-index nil)))
          (bind-key "C-c M-p" 'op/do-publication-and-preview-site)))
    )
</pre>
</div>
</div>
</div>

<div id="outline-container-org8cc0a10" class="outline-2">
<h2 id="org8cc0a10">安装主题</h2>
<div class="outline-text-2" id="text-org8cc0a10">
<ol class="org-ol">
<li>git clone <a href="https://github.com/lijigang/ljg">https://github.com/lijigang/ljg</a></li>

<li>cp -r ljg ~/.emacs.d/elpa/org-page-xxxx.xx/themes/</li>

<li>add (setq op/theme ‘ljg)</li>
</ol>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-05-29</pubDate>
      <guid>http://lijigang.github.io/blog/使用org-page搭建网站/</guid>
    </item>
  </channel>
</rss>