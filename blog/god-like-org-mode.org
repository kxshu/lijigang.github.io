#+TITLE:       神器Org-mode
#+AUTHOR:      lijigang <i@lijigang.com>
#+DATE:        2018-05-29 Tue
#+URI:         /blog/神器org-mode
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

#+BEGIN_QUOTE
Org is a mode for keeping notes, maintaining TODO lists, and project planning
with a fast and effective plain-text system.

It also is an authoring system with unique support for literate programming and
reproducible research.
#+END_QUOTE

上面 Org mode 官网上介绍的文字基本覆盖了它可实现的功能, 但用词还是腼腆了点, 它就
是效率之神. 如果你喜欢管理记录, 喜欢GTD, 一定一定要学习下 =Org mode= , 学会它, 你
会放弃你所知道的一切其它的效率软件.

关于 Org mode 在各方面使用的总结, 有很多优秀文章: [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][GTD]] , [[http://cachestocaches.com/2018/6/org-literate-programming/][Literate Programming]] ,
[[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Cookbook]] , 当然也少不了最最经典的 [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text!]] .

我个人是 Vim 的忠实粉丝, 在我看来, Vim 的 mode editting 已经是文本编辑的效率极限
了. 但自从体验了一次 Org mode 的功能, 实在是太强大了，只能转投 Emacs 的阵营. 切
换后因不习惯 Emacs 变态的组合式按键, 适应了好久. 万幸, 后来 Spacemacs 降世, 它竟
然完美的综合了 Emacs 的强大包容性和 Vim 的强大编辑效率, 我能想象到的最美好的事情
不外如此!

一个不写代码的产品, 使用 Spacemacs 的 Org mode 记录日常时间和项目的折腾之旅, 就
这样开始了:

* 安装 Org-mode
Org 现在已经是 Emacs 出厂自带的一部分了，所以只要你现在打开 Emacs 就可以直接使用
Org. 但如果你不想使用 Emacs 自带的 Org 版本，想安装一个更新版本，你可以有三种办
法来实现：

1. 使用 Emacs package system

   #+begin_src emacs-lisp
   M-x package-install RET org
   #+end_src

   这种安装方法，安装的org版本，需要看你配置源中对应的版本，而且安装时需要确保没
   有org相关函数装载，不推荐使用。

2. 把新版 Org 下载到本地

   [[https://orgmode.org/][Org 官网]] 有最新版本的压缩包可下载到本地，然后只需要将解压后的目录加到
   load-path变量即可。

   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/path/to/orgdir/lisp")
   #+end_src

   目前我使用的就是这个办法，并将解压后的目录放到了iCloud中，多端同步就直接到位
   了。

3. 使用 Org 的 git 仓库

   #+begin_src bash
   $ git clone https://code.orgmode.org/bzg/org-mode.git

   $ cd org-mode/

   $ make autoloads
   #+end_src

   时刻与最新版本保持同步，很容易配置出问题。为了稳定起见，目前没采用这个办法。


不管你选择哪个方式，安装成功后，每当你打开 .org 后缀的文件时，Emacs 默认会使用
Org mode。

* 效率管理的原子 : Task
** State : 任务的状态变更
在效率管理的过程中，我们的原始对象始终是一项具体的事项，这个事项在不同的软件中有
不同的称呼，我统一使用 =任务（Task）= 来称呼它。

在 Org 中，对应的专业名词叫 =Headline= , 如果一行文本是以一个或多个「*」开头， 空
格后跟一段文本，那么这一行就是 =Headline= ，那段文本就是我们想要定义的某个具体任务。

而一个任务的子任务，在Org中的表示方式很简单，在任务下方新起一行，并比该任务多一
个「*」即可。子任务的子任务怎么表示，同样方法，在子任务下方再多一个「*」开头的任
务就好了。

#+DOWNLOADED: file:/Users/ljg/Downloads/2018-09-07_12-21-11.png @ 2018-09-07 12:21:27
[[file:../images/2018-09-07_12-21-11.png]]

看着上面的例子，有没有感觉到不舒服？这么多星星符号罗列在一起感觉很乱，Org 有一个
缩进模式，当打开后，每个Headline只显示一个星星符号，同时会按照所属层级进行适当地
缩进. 另外，一直看着一个星星符号也太无聊了，我们可以自定义每个层级显示的符号：

  #+begin_src emacs-lisp
  ;; 打开org-indent mode
  (setq org-startup-indented t)

  ;; 设置bullet list
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))
  #+end_src


配置上面那行代码后，显示效果如下：

#+DOWNLOADED: file:/Users/ljg/Downloads/2018-09-07_12-25-06.png @ 2018-09-07 12:25:24
[[file:../images/2018-09-07_12-25-06.png]]

样式调整好看些了，我们使用一下看看。一个任务写了一段相关文本后，想开始新的一个任
务，那么之前的任务就不是当前的重点了，一般的编辑器都是滑动鼠标，把当前新的任务滚
动到屏幕中间之类的操作；而在Org中，我们可以轻轻按一下TAB，之前的任务连带它下面的
文本会折叠成一行，不占用宝贵的屏幕空间。 后面如果想查看这个任务下的内容，移动到
该任务，再按下TAB即可展开。

当你使用了一段时间，一个任务已经完成了，这时候怎么标识待做任务和已完成任务？org
有个变量可以指定任务状态的标识文字，当然最简单的就是直接使用 todo/done 之类的了，
但你也可以按自己的需要去设置，比如待做、进行中、稍后再做、交另人做、已完成等。

#+begin_src emacs-lisp
;; 设置todo keywords
(setq org-todo-keywords
      '((sequence "TODO" "HAND" "|" "DONE")))
#+end_src

你如果要变更某个任务的状态，只需要把光标定位到该任务，并按下C-c C-t，就会按你设
定的状态文案去变更状态，重复按，即会顺序变更状态。（在Spacemacs中，只需要按t即可）

只是显示一个TODO，好像也不是太漂亮。可以针对这些状态关键词设置单独的前景色和背景
色，突出下显示效果：

#+begin_src emacs-lisp
;; 调试好久的颜色，效果超赞！ todo keywords 增加背景色
(setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                ("HAND" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))
#+end_src
让我们看看现在的显示效果：

#+DOWNLOADED: file:/Users/ljg/Downloads/2018-09-07_12-26-04.png @ 2018-09-07 12:26:18
[[file:../images/2018-09-07_12-26-04.png]]
** Capture : 如何快速记录任务
有了漂亮的任务列表和状态显示效果, 但每次添加任务都需要手动打开 org 文件, 找到相
应位置一条条的录入任务. 这种重复操作经常打断本来正在执行的操作, Emacs 通过 Org
Capture 解决了这个问题. 它既可以支持在任意文件随时记录任务或想法, 同时也支持将添
加的任务到指定文件的指定位置.

使用它更是简单, 首先是配置一下唤醒该功能的快捷键和添加任务的默认文件:

#+begin_src emacs-lisp
;; 设置全局快捷键, 方便随时使用这个功能
(global-set-key (kbd "C-c c") 'org-capture)

;; 我使用的 Spacemacs , 实际使用的是下面的快捷键
(evil-leader/set-key "oc" 'org-capture)

;; 设置默认情况下, 添加的任务到哪个文件中
(setq org-default-notes-file "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org")
#+end_src

该功能默认已经有一个模板可以使用, 但一般每个人都会根据自己的实际使用情况定制自己
的模板. 定制模板说简单也简单, 说复杂也可以很复杂, 简单来说, 只需要查阅变量
=org-capture-templates= 的说明文档, 设置一下这个变量就可以了, 比如下面这样:

#+begin_src emacs-lisp
;; configure org-capture templates
(setq org-capture-templates
      '(("t" ; hotkey
         "Todo list item" ; name
         entry ; type
         ; heading type and title
         (file+headline org-default-notes-file "Tasks")
         "* TODO %?\n  %i\n  %a") ; template
        ...))
#+end_src

说复杂的话, 设置不同模板的字段可以各种个性化, 比如可以在插入任务的同时 [[http://www.windley.com/archives/2010/12/capture_mode_and_emacs.shtml][插入当地
天气]] , 或者 [[http://cestlaz.github.io/posts/using-emacs-23-capture-1/#.W5IV5o6QH-A][各种场景]] , 甚至有人可以把这功能集成到 [[https://blog.sleeplessbeastie.eu/2016/04/22/how-to-use-org-capture-from-system-tray/][桌面托盘位置]] .
** Archive : 归档历史任务
随着任务记录越来越多, 历史上已完成的任务如果一直累积在任务文件中, 文件会越来越大,
也会影响搜索结果和速度. 解决这个问题可以使用归档功能, 把已完成的任务归档到指定文
件中, 这样任务文件持续保持精简, 同时历史已完成任务还不会丢弃, 有需要时可随时搜索
查看归档文档.

#+begin_src emacs-lisp
;; 在 Spacemacs 中设置归档命令的快捷键
(evil-leader/set-key "od" 'org-archive-subtree)
#+end_src

Emacs 默认会在任务文档当前目录生成一个后缀为 _archive 的同名文件做为归档文件. 当
然你也可以指定你想要的归档目录和文件名称:

#+begin_src emacs-lisp
;; 配置归档文件的名称和Headline格式
(setq org-archive-location "%s_archive::date-tree")
#+end_src

上面配置的完整释义可以参看 org-archive-location 的帮助手册, 配置后的归档文件中的
显示效果如下:

#+DOWNLOADED: file:/Users/ljg/Downloads/2018-09-07_18-01-34.png @ 2018-09-07 18:01:47
#+attr_latex: :width 600
[[file:../images/2018-09-07_18-01-34.png]]

* 任务的分子: Meta-data

** Time Clocking : 记录任务用时

** Time Reporting: 时间都去哪儿了

** Tags : 换个角度看世界

** Properties: 再换个角度看看

* 杂项

** Tables : 其实我也能当 Excel 使

** Hypelinks: 把我当浏览器使也可以

** Export : 分享给不使用 Orgmode 的人
