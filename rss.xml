<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>捉妖记</title>
    <link>http://lijigang.github.io/</link>
    <description>static site generator</description>
    <pubDate>Wed, 29 Aug 2018 18:37:54 CST</pubDate>
    <lastBuildDate>Wed, 29 Aug 2018 18:37:54 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>知识的形状</title>
      <link>http://lijigang.github.io/blog/知识的形状/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>知识的形状</h1>
            <p>
知识有形状吗? 要想知道这个答案, 首先得定义下什么是知识.
</p>

<p>
你对 <code>知识</code> 的认知, 取决于你评定信息的标准.
</p>

<p>
柏拉图认为, 人们的观点中, 正确的, 并且是因为正当理由为人们所信服的子集, 才是知识;
</p>

<p>
雅典人认为知识就是真实的观点, 笛卡尔认为知识是你在任何可想象的环境中都不会怀疑的
事物, 科学家认为知识是经过精心设计的, 反复的实验能够使我们确信它.
</p>

<p>
艾可夫提出了: 数据→信息→知识→智慧 (DIKW) 层级分类, 我们看到0和1, 他们代表什么,
他们有什么意义, 他们能为我们提供什么帮助, 每一层都从下面那一层汲取价值.
</p>

<p>
我们一直在说网络时代没有深度思考能力, 获得知识的效率比以前下降. 读 <code>David
Weinberger</code> 的 知识的边界, 学到了网络式的知识的特点, 我们并不是没有深度思考能力了,
而是需要对之前的学习方法做些调整.
</p>

<div id="outline-container-org780d69e" class="outline-2">
<h2 id="org780d69e">减法变加法</h2>
<div class="outline-text-2" id="text-org780d69e">
<p>
不管怎么定义知识, 我们如何理解知识的过程一直在演化迭代, 尤其是进入了网络时代之后.
我们一直以来理解知识的策略就是 <code>做减法</code> : 不断地过滤筛选, 将复杂问题简化, 把信息量
大的问题通过审核机制或进入门槛, 人为降低. 但到了网络时代, 我们现在的策略或者说是
网络的特性是 <code>做加法</code> : 将任何一个想法, 它的每一个细枝末节都放置在巨大的,松散的网
络之中.
</p>

<p>
网络特性对于知识爆发的促进, 很自然的就引起了「信息过载」的话题. 但其实信息过载不
是从有网络之后才出现的, 对于网络之前的人们, 图书馆中的存书和每年新出的期刊书籍已
经是远远读不完的状态. 大家之所以现在对于信息过载这么焦虑, 主要的原因在于我们对于
信息处理的过滤器失效了.
</p>

<p>
之前的期刊杂志书籍, 由编辑或专业人士把关过滤, 符合一定标准的才能发行, 一定程度上
已经帮我们做了很多的筛选工作. 但现在网络的自由开放, 不再需要专家审核, 任何人都可
以发表自己的观点. 对于这种新的情况, 目前最有效的过滤器是 <code>算法推送</code> 和 <code>社交推荐</code> 这
两种技术. 算法可以将汪洋大海般的信息做筛选, 把你可能感兴趣的推送到前边, 优先让你
看到; 社交推荐基本可以看作是人以群分的应用, 你的朋友们感兴趣的, 很有可能你也会比
较喜欢. 但这两种方式并没有从根本上解决问题, 你获取信息只能交给算法或身边的朋友吗?
自由意志何在? 自己的筛选过滤器在哪里? 这些问题还需要每个人按自己的特点去摸索和确定.
</p>
</div>
</div>

<div id="outline-container-org6ea4783" class="outline-2">
<h2 id="org6ea4783">知识的根基</h2>
<div class="outline-text-2" id="text-org6ea4783">
<p>
人们对于知识殿堂的建立, 一直以来, 都有一个共识: 知识殿堂是一个框架, 里面有一个
<code>根基</code> , 随着时代的发展, 人们越来越聪明, 在这个根基之上, 不断盖建更宏大的房子.
</p>

<p>
虽然古人和现代人都认可知识殿堂是建立在牢固根基上面, 但两者对于 <code>根基</code> 是什么有着巨
大的差异. 古人会将类推法做为根基, 将观察到的A情况, 类推到B情况, 不管结果如何. 而
现代人将根基敲定为 <code>事实</code>. 判断是非对错, 不看A情况是什么样, 而看B情况的事实是怎样的.
</p>

<p>
这个在现在看来简单到不能再简单的东西, 真不能想象人们达成这个共识竟然是近现代. 现
在人们已经形成了遇到问题, 组建一个事实调查团, 通过排查问题, 找到事实真相的惯例.
</p>

<p>
现代人形成了拿事实说话的习惯后, 在网络时代, 对任何一个具体问题, 基本一定会出现完
全对立的声音, 甚至各方都能举出事实论据. 好像牛顿第三定律有了一个网络版本一样:
</p>

<blockquote>
<p>
在网络上, 每个事实都有一个大小相等, 方向相反的观点存在.
</p>
</blockquote>

<p>
可利用信息数量的大幅增加反而让我们比以往更容易犯错. 我们可以随手获得如何多的事实,
以至于失去了得出结论的能力, 因为总是有其它事实支持其它的说法.
</p>

<p>
事实还是事实, 但它们不再像之前我们所强调的一样, 是整体社会的基石. 以后怎么办?
</p>
</div>
</div>

<div id="outline-container-org29a669b" class="outline-2">
<h2 id="org29a669b">网络的性质</h2>
<div class="outline-text-2" id="text-org29a669b">
<p>
互联网有五个基本的性质:
</p>

<ol class="org-ol">
<li>连接: 谁都可接入, 页面可跳转到任何地方</li>
<li>多样性: 接入人员和内容的多样性, 决定了网络本身呈现了多样性</li>
<li>子网络: 因网络足够自由, 相同兴趣的人员会成立小圈子, 形成子网络</li>
<li>累积性: 网络内容可留存, 可随时查阅</li>
<li>增长性: 马太效应, 因为丰富多样, 接入的反而更多</li>
</ol>

<p>
我们应该达成一个潜在共识, 在通往真理和知识的道路上, 必须对那些持反对意见的人保持
一种理性和开放的态度. 想象下启蒙运动时的画面: 理性的人们共聚一堂, 以尊重和坦诚的
姿态探讨他们之间的分歧.
</p>

<p>
在网络时代, 对于这种被放大的分歧, 对于我们获得真知, 到底是好还是坏? 我们有了更多
地信息, 可以更好地了解事实的完整真相; 我们同时也有了更多地矛盾事实, 如何像之前一
样快速形成结论? 是我们之前对于知识的定义太仓促和狭隘了吗? 现在这种混乱无形的方式
才是知识真正的模样吗?
</p>
</div>
</div>
<div id="outline-container-orgc171b8f" class="outline-2">
<h2 id="orgc171b8f">知识的形状</h2>
<div class="outline-text-2" id="text-orgc171b8f">
</div>
<div id="outline-container-org5c842f0" class="outline-3">
<h3 id="org5c842f0">三角形的知识</h3>
<div class="outline-text-3" id="text-org5c842f0">
<p>
艾可夫的DIKW层级分类, 画出来的形状, 其实就是一个金字塔形状.
</p>

<p>
数据经过整理, 被提取出了信息; 信息经过分析, 形成了知识; 知识经过实践, 变成了智慧.
</p>

<p>
我们明显可以感觉到, 这种金字塔形状中的「知识」, 和我们心里认为的 <code>知识</code> 不是一个东
西. 就像是知识的一个切片.
</p>
</div>
</div>
<div id="outline-container-orgb1a51c5" class="outline-3">
<h3 id="orgb1a51c5">长条式的知识</h3>
<div class="outline-text-3" id="text-orgb1a51c5">
<p>
我们认知世界的工具中最重要一个就是 <code>演绎法</code> :
</p>

<ol class="org-ol">
<li>所有人都会死</li>
<li>苏格拉底是人</li>
<li>所以苏格拉底也会死</li>
</ol>

<p>
当然, 我们在认识世界的过程中, 需要比这长得多的论证, 但本质形式上就是上面的三段论.
</p>

<p>
我们可能需要从A开始, 一直论证到Z, 每一步都要经得起推敲. 这种长条式 (long-form)
的论证方式, 就是一直以来人类用于推理的最好方式.
</p>

<p>
尤其是再加上书籍这种知识媒介的特点, 我们不得不建立一个长长的思考序列, 由一个想法
通向另一个想法, 只是因为书籍是一张纸一张纸装订起来的.
</p>

<p>
长条式思考之所以呈现成这种样式, 是因为书籍这个载体. 而书籍又一直是知识的媒介, 所
以我们很自然的就会认为, 知识就应该是这种形状.
</p>
</div>
</div>
<div id="outline-container-org250cdf1" class="outline-3">
<h3 id="org250cdf1">网络式的知识</h3>
<div class="outline-text-3" id="text-org250cdf1">
<blockquote>
<p>
正如十字螺丝刀普及之后, 一字螺丝刀太滑的缺点才变得明显; 印刷书籍的很多缺点, 也是
在一个完全不同的介质出现之后才变得明显起来.
</p>
</blockquote>

<p>
在网络上, 观点从线装的书页中解释出来, 我们才发现, 以前的长条式作品原来还是不够长.
它们在杂乱的观点中发现秩序, 明晰观点, 但却只能通过强迫读者的方式, 让读者的目光只
能沿着作者铺成的小路前行. 但思想从来不是孤立考量观察的东西, 我们有的只是思想之网.
</p>

<p>
如果书籍告诉我们, 知识是从A到Z的旅程, 那么网络化的知识可能会告诉我们, 世界本来面
目, 并非是一个逻辑严密的论证, 而更像是一个无定形的, 相互交织的, 不可掌控的大网.
</p>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-08-29</pubDate>
      <guid>http://lijigang.github.io/blog/知识的形状/</guid>
    </item>
    <item>
      <title>增长的底层原理</title>
      <link>http://lijigang.github.io/blog/增长的底层原理/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>增长的底层原理</h1>
            <p>
人类从出生到成长为成人，只用了很短的时间，但余生这么久的时间确没有再在形体上成长，
为什么会这样？ 人类为什么不会像一颗大树一样， 长个几十米高？
</p>

<p>
公司从成立时战战兢兢，摸索着PMF在哪里，到后面不断扩大市场占有率， 达到行业老大的
过程中， 为什么老板们都在焦虑「队伍大了不好带」？ 为什么公司老员工会感慨「公司变
了， 不像之前一样有朝气了」？ 为什么不能无限制的扩大， 长久的生存下去？
</p>

<p>
城市规模大小有没有限制？ 大城市和小城市相比，好处在哪里？ 是不是可能出现超大城市？
</p>

<p>
上面这些关于生物、公司、城市的规模成长方面的问题， <code>Geoffrey West</code> 在规模这本书中
通过一个简单的框架&#x2013;规模法则&#x2013;全部解释了。
</p>

<blockquote>
<p>
规模缩放是指在一个系统在规模发生变化时，如何做出响应。
</p>

<p>
可以简单公式化（不精确）理解为 <b>Y = X<sup>k</sup></b>
</p>

<p>
k=1， 我们称作线性缩放；k&gt;1， 我们称作超线性缩放；k&lt;1， 我们称作亚线性缩放
</p>
</blockquote>

<p>
我们日常经验或者潜意识做出的判断很容易走到线性缩放的路子上， 因为这样最简单。
</p>

<p>
比如，一个70kg的成人注射某药剂的药量是100ml，那么一个7kg的婴儿应该注射多少药量？
是不是下意识就想答10ml？
</p>

<p>
再比如， 一个10万人的城市有3万个工作岗位， 那么一个100万人的城市大概有多少工作岗
位？ 是30万个吗？
</p>

<p>
作者在书中指出， 生物体的规模缩放指数约为0.75， 城市的基础设施建设规模缩放指数为
0.85，城市的GDP规模缩放指数为1.15， 公司的规模缩放指数约为0.9.
</p>

<div id="outline-container-org5e2116a" class="outline-2">
<h2 id="org5e2116a">生物的增长</h2>
<div class="outline-text-2" id="text-org5e2116a">
<p>
所有生命的运行都是通过把物理或化学来源的能量转化为有机分子，这些有机分子通过新陈
代谢过程构建、维持和繁殖复杂的、高度组织化的系统。这里面主要由两个系统运行实现：
遗传密码系统和新陈代谢系统。
</p>

<p>
我们每天仍然在进食，仍然在新陈代谢，但怎么就长到两米不到就不长了呢？ 原因是新陈
代谢的能量被按比例分配给了 <code>现有细胞的维护</code> 和 <code>新细胞的生长</code> 。
</p>

<p>
用以维持细胞所需的能量与现有细胞数成正比，即与生物重量成线性关系； 而代谢率呈亚
线性缩放，k=3/4. 假设一个生物体的体型加倍，那么他体内细胞数相应加倍，所以维护细
胞所需的能量也加了一倍。但其代谢率（能量供应）仅为原来的2<sup>(3/4)</sup>=1.682倍。所以用
来维持细胞所需的能量比新陈代谢所能提供的能量增长更快，这就使得成长到一定阶段，用
于生长的能量减少为零，停止生长。
</p>

<p>
那为什么代谢率呈亚线性缩放？ 能量如何传递到细胞中，是被身体内的血管网络限制。
</p>
</div>
</div>

<div id="outline-container-org2bfcbbe" class="outline-2">
<h2 id="org2bfcbbe">公司的增长</h2>
<div class="outline-text-2" id="text-org2bfcbbe">
<p>
一家公司的可持续性增长最终是由其利润推动，即总收入与总支出的差额。
</p>

<p>
总收入这个要素，通过分析公司员工数量和公司总收入的关系，在对数坐标下，这两者呈线性缩放。
</p>

<p>
总支出这个要素，在公司规模较小时，呈亚线性变化，随着公司规模扩大，最终转变为近似线性变化。
</p>

<p>
这就要求每家公司都必须要跟上指数级扩张的市场的脚步，即便一家公司收益在增长，但只
要其增长速度落后于市场的增长，仍有可能会完蛋。
</p>

<p>
年经的公司支出的亚线性变化，再加上资本扶持，使其可以快速增长。但随着规模变大，公
司通常会增加更多地规定和流程，这也就导致了官僚的增加。 这些行为通常会牺牲创新和
研发。作者分析标准普尔公司会计数据库的数据，发现随着公司规模增长，分配给研发的相
对资源量会系统性下降，即随着公司扩大，对于创新的支持跟不上官僚和管理开支的增长。
</p>

<p>
随着公司规模扩大，市场内存的反馈机制会导致其产品空间不断狭窄，反馈不好的产品全淘
汰掉了，剩下的就是反馈良好的一两个产品。如何在市场的正反馈和开发新产品的长期战略
需求之间取得平衡，是目前各大公司的巨大挑战。
</p>
</div>
</div>

<div id="outline-container-org12178ed" class="outline-2">
<h2 id="org12178ed">城市的增长</h2>
<div class="outline-text-2" id="text-org12178ed">
<p>
城市像生命体一样，会代谢能量和资源，产生废弃物，成长并进化，感染疾病， 它们也会变老。
</p>

<p>
作者用规模缩放的思考框架，将城市也看作生命体，来分析城市的规模增长。作者挑选了加
油站数量、专利数量、犯罪数量、餐厅数量等与城市人口规模的关系做为切入点，分析城市
的缩放系数。
</p>

<p>
统计结果显示，电线、道路、水管的总长度， 加油站数量， 与城市规模的缩放系数为
0.85. 即城市规模增长一倍，只需要增加85%的物质基础设施。平均来看，城市规模越大，
越绿色。而平均工资、专利数量、犯罪案件数量、餐厅数量等的缩放系数为1.15。值的一提
的是，这些观察所得的规模法则适用于同一国家内的不同城市，即北京和南京的缩放关系可
以通过这个法则推导，但不能直接拿北京和纽约来比。
</p>

<p>
按上面的讨论，基础设施是亚线性缩放，城市产出是超线性缩放，那明显大城市会发展越来
越好， 这种开放式增长， 最终应该是出现超大城市才对。但还有些其它因素需求考虑，比
如邓巴数字，人类维持紧密社交关系的数量是有上限的。 比如上下班通勤时间，大多可接
受为一小时以内，超大型城市，上班需要三五个小时，人们也无法正常生活了。所以城市规
模的增长， 到了一定程度，应该会平缓甚至停滞。
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-08-26</pubDate>
      <guid>http://lijigang.github.io/blog/增长的底层原理/</guid>
    </item>
    <item>
      <title>商业本质</title>
      <link>http://lijigang.github.io/blog/商业本质/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>商业本质</h1>
            <p>
最近在学习 <code>得到</code> 上面 <b>刘润</b> 的五分钟商学院，很受启发，记录下学习总结。
</p>

<blockquote>
<p>
生意的本质就是创造产品价值，然后把产品价值交换给有需要的人。
</p>
</blockquote>

<p>
产品价值的创造过程不是今天讨论的重点，今天主要想聊下产品价值交换出去并从中获利的过程。 这个过程可以用公式表达为：
</p>

<blockquote>
<p>
<span class="underline">收入 = 流量 * 转化率 * 客单价 * 复购率</span>
</p>
</blockquote>

<p>
各行业的商业模型会有些差异, 对应到这个公式中的指标会有细拆或组合的情况. 但本质上, 都是这四个关键因素的乘积.
</p>

<div id="outline-container-org91fb8cb" class="outline-2">
<h2 id="org91fb8cb">流量</h2>
<div class="outline-text-2" id="text-org91fb8cb">
</div>
<div id="outline-container-org4126921" class="outline-3">
<h3 id="org4126921">流量洼地 = 低获客成本</h3>
<div class="outline-text-3" id="text-org4126921">
<p>
在商人眼中，对于流量就是一句：如何以 <code>尽可能低的价格</code> 获得 <code>尽可能多的流量</code> 。
</p>

<p>
坐地铁上下班换乘的路上，是不是经常遇到面包店的妹子在人流中间推广当日特价面包？
</p>

<p>
早上在公司楼下，是不是经常遇到一个推着早餐车卖早饭的流动商贩？
</p>

<p>
晚上回家在小区门口，是不是时不时会遇到骑着三轮车卖鲜花或水果的流量商贩？
</p>

<p>
有想过为什么会在这些时间和地点遇到他们吗？ 他们就是找到了 <code>流量洼地</code> 。所谓流量洼地，就是获客成本比较低的流量渠道。
</p>

<p>
如果你明天要开一家快餐店，你是要找一个房租贼贵的商场或写字楼， 还是要找一个偏远
但便宜的小角落门店？ 只要算下你的获客成本就好了，如果算下来都不划算， 你就需要再
去找找有没有新的流量洼地存在。 一般来说，如果有一个新的技术改进或商业模式出现，
都会存在一个流量洼地红利期， 尽可能快地抓住这波红利， 狠狠赚上一票吧。
</p>
</div>
</div>

<div id="outline-container-orgdc86933" class="outline-3">
<h3 id="orgdc86933">引流品 = 抓手</h3>
<div class="outline-text-3" id="text-orgdc86933">
<p>
除了花钱买流量以外，还可以通过利润换流量的玩法来创造流量。
</p>

<p>
所谓引流品， 就是通过让出利润，以接近成本价甚至略赔的价格，吸引流量的产品。
</p>

<p>
同样是卖早餐，你的鸡蛋比旁边那家便宜3毛， 其它产品价格不变或者略贵。 鸡蛋就是你的引流品。
</p>

<p>
同样是卖咖啡，你的某一款咖啡卖的超便宜，吸引很多用户进来购买，这款咖啡就是你的引流品。
</p>

<p>
杭州西湖不要门票; 酒吧对女生免费，对男生收费； 电影院门票超便宜，但爆米花贼贵；
药店免费使用体重计，减肥药价格高； 超市限时限量供应超便宜鸡蛋， 这些都是引流品的
玩法。
</p>
</div>
</div>

<div id="outline-container-org0f6674a" class="outline-3">
<h3 id="org0f6674a">关联流量 = 精准流量</h3>
<div class="outline-text-3" id="text-org0f6674a">
<p>
想获得流量，要先分析你的用户群体都在哪，然后去他们经常在的地方吸引他们的注意力，把他们拉到你的地方去消费。
</p>

<p>
这些 <code>他们经常在的地方</code> 就是关联流量。 你和这些流量方不是同一个行业，没有直接竞争关系，但你们又都服务着同样的用户群体， 就有着合作的空间。
</p>

<p>
比如航空公司和酒店的积分打通， 比如生活用品品牌和酒店的合作， 比如Uber之前搞的一键呼叫面试官活动， 等等。
</p>
</div>
</div>
</div>

<div id="outline-container-org5c25556" class="outline-2">
<h2 id="org5c25556">转化率</h2>
<div class="outline-text-2" id="text-org5c25556">
<p>
你通过购买流量或者创造流量的方式，吸引了大量目标用户进来。下一步就是要解决如何让他们掏腰包购买你产品的问题了。
</p>
</div>

<div id="outline-container-org239cd68" class="outline-3">
<h3 id="org239cd68">展示设计</h3>
<div class="outline-text-3" id="text-org239cd68">
<p>
除了产品本身的包装设计以外， 还有一个 <code>动线设计</code> 的基本功需要修炼。
</p>

<blockquote>
<p>
<code>动线</code> 就是注意力流动的路线。 动线设计就是把最希望用户购买的产品，放在用户必经的动线上。
</p>
</blockquote>

<p>
关于动线设计，宜家绝对是大师中的大师。 只要进了门， 一条路线让你从头走到尾， 不买东西出不来。
</p>

<p>
另外还有一个用户心理可以利用，就是 <code>影响力</code> 这本书中介绍的其中一项 <code>服从权威</code> 。
</p>

<p>
书店经常会在最显眼的位置摆一个畅销书专区， 超市会放一个热卖产品重点展示位， 酒店
或者私人医院经常会展示名人合影， 这些都是在利用 <code>服从权威</code> 的方法使人就范。
</p>
</div>
</div>

<div id="outline-container-orgd5fda4d" class="outline-3">
<h3 id="orgd5fda4d">决策时间</h3>
<div class="outline-text-3" id="text-orgd5fda4d">
<p>
消费者在线下购买一个产品，平均决策时间是13秒； 线上是19秒。
</p>

<p>
为了提升转化率，要想尽办法减少用户的决策时间。
</p>

<p>
电商平台在商品详情页的设计方案中， 一个只放购物车图标的方案和 <code>加入购物车</code> 文案的方案， 下单率能差30%以上。
</p>

<p>
特价优惠，最后十件； 跳楼价大甩卖，最后三天； 限量发行，先到先得。 这些文案都是
为了通过短缺来刺激用户减少决策时间。
</p>

<p>
还有一个减少用户决策时间的终极大招： <code>打折</code> 。
</p>

<p>
在使用打折过程，需要特别注意一点， 不能让用户感觉到你的产品价值低，原来的定价是虚高的。 具体玩法可以有下面几种：
</p>

<ol class="org-ol">
<li><p>
低价高购
</p>

<p>
花较低价格，可以买到价格贵贵的东西，你会有赚到便宜的感觉。 很多服装店的 加价购， 消费满1000元，可加价149元，在原价300元区域任选一件。
</p></li>

<li><p>
充值免单
</p>

<p>
充值1000元，可以免掉今天消费的188元。 你算下这是打了几折？ 你充值后，以后是不是得经常来这家店消费？
</p></li>

<li><p>
赠而不折
</p>

<p>
你要买的这件商品不能再便宜了，但我们可以再赠送你一件新品小样或者赠送您一张50元折扣券，下次可随时用。
</p></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-org3e12473" class="outline-2">
<h2 id="org3e12473">客单价</h2>
<div class="outline-text-2" id="text-org3e12473">
<p>
用户被你吸引到店里，也确实下单了，如何提升客单价？
</p>

<p>
上淘宝看看那些店铺是怎么玩的：
</p>

<p>
消费满199元包邮，你现在买的商品180元，会不会想多搞两个小件凑够199元省掉10元运费？
</p>

<p>
进店送50元优惠券，但满800元可用。 你下单的商品是700元， 会不会想再搞100元的商品来使用这张优惠券？
</p>

<p>
你本来就是想进去买一件T恤，下单时发现这衣服搭配的裤子和鞋子超好看， 会不会顺带着把这一身搭配全买了？
</p>

<p>
还有一种单产品的价格太高，用户有需求但就是买不起怎么办？ <code>分期</code> 。
</p>

<p>
看看出租车行业的每月份子钱，就是用这些钱分期还车钱； 更不用提买房子， 买车子这些典型的分期场景了。
</p>
</div>
</div>

<div id="outline-container-orgd72aeb7" class="outline-2">
<h2 id="orgd72aeb7">复购率</h2>
<div class="outline-text-2" id="text-orgd72aeb7">
</div>
<div id="outline-container-org3ede2d1" class="outline-3">
<h3 id="org3ede2d1">会员制</h3>
<div class="outline-text-3" id="text-org3ede2d1">
<p>
用户永远想要更优惠的价格， 商家是想更多的流量，可以接受薄利多销。
</p>

<p>
但这里有一个鸡生蛋，收生鸡的问题。 到底是用户先涌入商家这里， 还是商家先让利降价？
</p>

<blockquote>
<p>
会员制的本质，是一种类似于团购的契约关系：用户承诺在商家这里更多地消费，商家承诺给用户更便宜的价格或更多优惠。
</p>
</blockquote>

<p>
会员制有两种玩法： 一是设置进入门槛， 二是设置逃离成本。
</p>

<p>
如果商家的话语权更高， 就可以采用进入门槛的玩法。 Costco的会员制是典型的进入门槛玩法，加入会员需要收会员费。
</p>

<p>
如果用户的话语权更高， 就可以采用逃离成本的玩法。 会员免费加入，用户任意消费都有
积分，随着消费越多，积分也越多。航空公司和连锁酒店，都是这种玩法的典型。
</p>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-08-24</pubDate>
      <guid>http://lijigang.github.io/blog/商业本质/</guid>
    </item>
    <item>
      <title>哲学了没: 哲学到底是什么</title>
      <link>http://lijigang.github.io/blog/哲学了没-哲学到底是什么/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>哲学了没: 哲学到底是什么</h1>
            <blockquote>
<p>
人们出于对智慧的热爱所探究的问题, 可被视为「哲学问题」
</p>
</blockquote>

<p>
与其将哲学视为一门「学科」，不如说哲学是一门教导我们如何运用理性来思考的「方法」。理性可以有很多种，仅从目的而言，哲学最常使用的理性能力为「逻辑能力」。
</p>

<p>
通过观察，我们对各种事物及概念做出性质上的区别与分类，接着使用逻辑来做出论证。哲学理论的说服力奠基于逻辑论证之上，因此，想要学习哲学思考，必定要先了解如何建构一个符合逻辑的论证。
</p>

<p>
一般来说，哲学论证可以通过两种方法来呈现：演绎法（deduction）与归纳法（induction）。
</p>

<p>
西方哲学有三大基本问题: 形而上学, 知识论, 伦理学.
</p>

<div id="outline-container-org3846ffa" class="outline-2">
<h2 id="org3846ffa">形而上学</h2>
<div class="outline-text-2" id="text-org3846ffa">
<p>
形而上学又被称为「第一哲学」, 它是一门研究事物本质和基本原理的学问. 从古到今, 从来没有任何一个形而上学问题被解决.
</p>

<p>
典型的形而上学问题例如:
</p>
<ol class="org-ol">
<li>世界的本质是什么? 世界是由什么构成的?</li>
<li>上帝是否存在?</li>
<li>人类到底有没有自由意志?</li>
</ol>

<p>
因为对于形而上学探讨已久却无法获得任何真理，哲学家们分成了两派。其中一派哲学家认为，我们之所以没办法获得任何真理，原因在于形而上学问题的答案超越了人类的能力。我们的心智能力与认知能力都有极限，想获得形而上学的答案或者真理，对人类来说是不可能的。人类不可能获得关于世界的真理，就好像蚂蚁永远不可能理解三维空间的向度到底是什么。
</p>

<p>
另外一派哲学家则认为，形而上学问题根本就不是真正的问题，它只是一连串通过适当的文法与语词包装出来的句子，看起来好像真有这么一回事，实际上完全没有任何意义。
</p>
</div>
</div>

<div id="outline-container-orgc30dbe5" class="outline-2">
<h2 id="orgc30dbe5">知识论</h2>
<div class="outline-text-2" id="text-orgc30dbe5">
<p>
一直到了科学革命后，人们理解到这世界不像基督教或其他宗教所描述的那样，以前从教堂及传教士口中所获得的知识大多是假的，或者说，那些根本就不算知识。从教堂里获得知识的渠道已经崩溃，人们需要思考另外一种获得知识的途径，以及获得知识的方法。
</p>

<p>
试想一下, 你自己才能确认自己真的「知道」了上海现在正在下雨这个「知识」?
</p>

<p>
在哲学上，要说一个人拥有某项知识，初步看来要满足三个条件: 信念、事实、证据。
</p>

<p>
首先, 你得真的相信上海现在正在下雨; 其次, 上海现在正下雨得是件事实; 最后你相信上海在上雨的理由得充分.
</p>

<p>
要是你说你做梦梦到上海正在下雨, 所以就坚信这个. 那这是瞎蒙, 不叫掌握知识.
</p>
</div>
</div>

<div id="outline-container-org7a72354" class="outline-2">
<h2 id="org7a72354">伦理学</h2>
<div class="outline-text-2" id="text-org7a72354">
<p>
人是群居动物, 人与人之间必须要有所联系，有所关联。既然人际之间必须有所关联，自然
而然就会有一些大家共同遵守的规范产生。这些规范让人与人之间可以安定平稳地生活在一
起，一旦有人违背了规范，此人将在很大程度上面临他人的谴责及排斥。
</p>

<p>
除了这些规范，人类还倾向于追求其他的东西, 比如说真善美.
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-08-01</pubDate>
      <guid>http://lijigang.github.io/blog/哲学了没-哲学到底是什么/</guid>
    </item>
    <item>
      <title>商业化大杀器: 互联网广告</title>
      <link>http://lijigang.github.io/blog/商业化大杀器-互联网广告/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>商业化大杀器: 互联网广告</h1>
            <blockquote>
<p>
如果你只有时间看一本互联网广告相关的书, 就读 <code>计算广告</code> 吧.
</p>
</blockquote>

<p>
个人一直很喜欢读「通史」或「简史」类的书籍, 因为可以通过历史发展演化的角度来看待研究对象, 知道它是什么, 知道它从哪里来, 并可更好地猜测它会到哪里去.
</p>

<p>
但市面上一直没能找到一本和「互联网广告」相关的这类书籍, 直到 <code>刘鹏</code> 老师的「计算广告」一书发布. 之前能找到的大多是介绍互联网行业的一些角色相关和产业链相关的书籍, 从里面可以了解互联网广告相关的概念和大概的流程, 但始终是在隔靴搔痒.
</p>

<p>
作者在这本书中重点做了两件事: 一是描述了在线广告的发展历史, 以及介绍了在线广告的四种类别.  第二件事是介绍了在线广告产品的核心关键技术(并有相关代码片断).
</p>

<p>
那到底什么是 <code>广告</code> ?
</p>

<blockquote>
<p>
广告主: 出钱的人
</p>

<p>
媒体: 能接触用户的渠道
</p>

<p>
用户: 会使用或购买产品的群体
</p>

<p>
<b>广告即是广告主通过媒体向用户展示产品信息, 以达到自己推广目的(提升品牌印象或提升销量等)</b>
</p>
</blockquote>

<p>
在线广告区别与传统广告的最主要特点就是以人群为投放目标, 支持数据量化优化. 这也就是 <code>大数据</code> 这个概念在互联网广告领域可以风生水起的一个原因.
</p>

<p>
计算广告的核心问题就是:
</p>
<ol class="org-ol">
<li>针对一系列用户 (u = user)</li>
<li>在不同的上网环境(情景)中 (c = context)</li>
<li>找到最佳广告投放策略 (a = advertise)</li>
<li>从而优化广告投放利润 (P = profit)</li>
</ol>

<p>
利润就是收入减去成本, 在广告活动预算一定的情况下, 优化利润相当于优化收入.
</p>

<blockquote>
<p>
R(a, u, c) = eCPM
</p>

<p>
= CTR(a, u, c) * Value(a, u, c)
</p>

<p>
= CTR(a, u, c) * 到达率 * 转化率 * 客单价
</p>
</blockquote>


<p>
在线广告针对人群受众售卖的特点决定了 <b>受众定向</b> 是非常重要的技术. 在考察定向技术好坏的时候, 重点看两个东西: <b>质</b> 与 <b>量</b>.
</p>

<p>
质就是定向的效果, 你圈定的人群流量上面变现效率是不是高出平均eCPM.
</p>

<p>
量就是定向的规模, 你圈定的人群流量占整体广告流量的比例.
</p>

<p>
广告系统比较流行的定向方式包括:
</p>
<ol class="org-ol">
<li><p>
地域定向(geo-targeting)
</p>

<p>
分地域投放. 比如北京地区的鲜花速递公司, 只需要投放北京地区的受众, 其它地区的受众不需要接触.
</p></li>
<li><p>
人口属性定向(demographical targeting)
</p>

<p>
人中属性的标签主要标签包括: 年龄/性别/教育程度/收入水平等.
</p></li>
<li><p>
上下文定向(context targeting)
</p>

<p>
根据网页内容来匹配相关广告, 定向的粒度可以是关键词/主题/或者分类.
</p></li>
<li><p>
行为定向(behaviorial targeting)
</p>

<p>
根据用户的历史访问行为来了解用户, 推送相关广告. 这也就是互联网应用为什么喜欢收集用户行为数据的原因, 可以产生变现的价值. 也由此催生出了数据收集/加工/交易的衍生业务.
</p></li>
<li><p>
商圈定向(hyper-local targeting)
</p>

<p>
在移动设备上面投放广告时, 我们有可能获得非常精准的地理位置信息. 这使得针对具体商圈进行投放广告有了可能性.
</p></li>
<li><p>
重定向(retargeting)
</p>

<p>
对某个广告主过去一段时间内的访客投放广告, 提升转化效果. 这种方式的定向, 是被公认为精准程度最高, 效果最突出的方式, 缺点就是覆盖量较小.
</p></li>
<li><p>
新客推荐定向(look-alike targeting)
</p>

<p>
平台根据广告主提供的重定向种子访客信息, 结合广告平台丰富数据, 为广告主找到行为上相似的潜在客户.
</p></li>
</ol>

<div id="outline-container-org430e16b" class="outline-2">
<h2 id="org430e16b">在线广告类别</h2>
<div class="outline-text-2" id="text-org430e16b">
<p>
作者把互联网广告分成了四个类别:
</p>
</div>

<div id="outline-container-org1663659" class="outline-3">
<h3 id="org1663659">合约广告</h3>
<div class="outline-text-3" id="text-org1663659">
<p>
主要包括两种方式:
</p>
<ol class="org-ol">
<li>CPT广告(按时段售卖)</li>
<li>CPM广告(按展示量售卖)</li>
</ol>

<p>
在互联网广告早期, 媒体和广告主(或广告代理)直接勾兑, 把线下广告的投放逻辑照搬到线上, 双方签订合同, 广告主买断指定时间段内的媒体广告位, 即按CPT的方式售卖.
</p>

<p>
后来演化出了按一次广告投放的展示总量和展示单价来签约, 即按CPM的方式售卖.
</p>

<p>
这两种售卖方式对应的广告系统, 其实只需要一个简单的广告排期系统即可.
</p>
</div>
</div>

<div id="outline-container-org6cc44d6" class="outline-3">
<h3 id="org6cc44d6">竞价广告</h3>
<div class="outline-text-3" id="text-org6cc44d6">
<p>
随着互联网广告行业的发展, 广告投放朝着精细化的方向不断前进. 交易模式也从原来的合约方式演进到了竞价方式. 不再像之前一样, 按时间段或批量售卖, 而是按不同的人群进行区分售卖, 价高者得. 这种模式同时还有一个好处, 即原来按合约售卖卖不掉的剩余流量, 现在也有可能通过竞价被售卖出去.
</p>

<p>
这种形式最主要的应用场景有两个: 一是搜索广告, 第二个是广告网络.
</p>

<p>
搜索广告因天生的搜索query词代表用户的搜索意图, 可以轻松区分出人群, 方便广告主竞价采买.
</p>

<p>
广告网络是指媒体方以页面上下文关键词或者访问人群的兴趣标签, 将人群做区分, 方便广告主竞价(或按合约)采买.
</p>
</div>
</div>

<div id="outline-container-org7db4b0d" class="outline-3">
<h3 id="org7db4b0d">程序化交易广告</h3>
<div class="outline-text-3" id="text-org7db4b0d">
<p>
市场的发展方向是向需求方彻底开放(毕竟是金主爸爸), 除了允许广告主按照媒体方或广告平台定义好的用户划分来购买以外, 进一步演化到了允许广告主自行选择流量和在每一次展示上独立出价, 参与竞价. 而这种方式, 就产生了以实时竞价(RTB)为核心的程序化交易市场.
</p>
</div>
</div>
<div id="outline-container-orgd4dd36e" class="outline-3">
<h3 id="orgd4dd36e">原生广告</h3>
<div class="outline-text-3" id="text-orgd4dd36e">
<p>
在移动互联网时代到来之后, 屏幕较小的移动设备环境下, 独立展示和运营广告和内容遇到的挑战. 业务开始探讨将内容和广告混合的道路(Content as ad), 提升变现效率.
</p>

<p>
典型的如信息流广告, 搜索广告, 软文广告等等.
</p>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-07-16</pubDate>
      <guid>http://lijigang.github.io/blog/商业化大杀器-互联网广告/</guid>
    </item>
    <item>
      <title>公司在你眼中算什么?</title>
      <link>http://lijigang.github.io/blog/公司在你眼中算什么/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>公司在你眼中算什么?</h1>
            <p>
同样的半杯水放在面前, 不同的人会有不同的看法, 有说这杯里 <b>还有</b> 半杯水的, 有说这杯里 <b>只剩下</b> 半杯水的;
</p>

<p>
同样的街道和风景, 不同的人会有不同的感觉, 有说这里人文气息浓厚的, 有说这里和其它地方没有什么不一样的;
</p>

<p>
同样的公司, 同样的环境, 对于不同的人, 也会有截然不同的意义:
</p>


<div class="figure">
<p><img src="/assets/blog/公司在你眼中算什么/what-company-means.png" alt="what-company-means.png" align="center" />
</p>
<p><span class="figure-number">Figure 1: </span>对于公司的四种看法</p>
</div>


<div id="outline-container-orgff803fd" class="outline-2">
<h2 id="orgff803fd">战场</h2>
<div class="outline-text-2" id="text-orgff803fd">
<p>
对于自驱性强, 喜欢得到外部认可的人来说, 公司就是一个战场.
</p>

<p>
他踏进公司大门, 就是为了向前冲, 与人斗其乐无穷.
</p>

<p>
他最不能接受的就是 <code>猪队友</code> , 扯后腿, 不配合, 推卸责任这些情况, 他一遇到就会发毛!
</p>
</div>
</div>

<div id="outline-container-org9372e47" class="outline-2">
<h2 id="org9372e47">学校</h2>
<div class="outline-text-2" id="text-org9372e47">
<p>
对于自我成长要求较高, 内心满足感较强的人来说, 公司就是另一个学校.
</p>

<p>
他进入这家公司, 就是为了成长进步, 公司业务好坏对他来说都不太重要, 只要自己获得了进步, 就是好的.
</p>

<p>
他最不能接受的就是 <code>停滞不前</code>, 没有新的东西输入, 让他拿已有能力持续输出, 对他来说是种煎熬.
</p>
</div>
</div>

<div id="outline-container-org52abfc7" class="outline-2">
<h2 id="org52abfc7">游乐场</h2>
<div class="outline-text-2" id="text-org52abfc7">
<p>
对于家底丰厚, 衣食无忧的人来说, 公司更像是一个游乐场.
</p>

<p>
他来公司, 更多是为了 <code>找点事做</code>, 不求业务多成功, 也不求收入有多高, 图一乐呵.
</p>

<p>
他不最能接受就是 <code>战场型队友</code>, 逼着他往前跑, 打断他的生活节奏, 经常会出现对着干的情况.
</p>
</div>
</div>

<div id="outline-container-org6a993ad" class="outline-2">
<h2 id="org6a993ad">秀场</h2>
<div class="outline-text-2" id="text-org6a993ad">
<p>
还有一种是喜欢成就感的人, 他把公司当做秀场.
</p>

<p>
他做事情, 喜欢摘果实. 做事情前, 先看这事利益有多大, 利益是不是归他所有.
</p>

<p>
他最不能接受就是 <code>果实被别人摘了</code>.
</p>
</div>
</div>

<div id="outline-container-orga9a0572" class="outline-2">
<h2 id="orga9a0572">结论</h2>
<div class="outline-text-2" id="text-orga9a0572">
<blockquote>
<p>
子曰：「君子和而不同，小人同而不和。」
</p>
</blockquote>

<p>
这种分类更多是 <code>世界观</code> 的 <b>不同</b>, 并没有 <b>对错</b> 之分.
</p>

<p>
下次当团队中有配合不顺时, 他可能不是对你这个人有意见, 也不是对你要沟通的事情有意
见, 而是大家对于公司的定位有区别.
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-06-10</pubDate>
      <guid>http://lijigang.github.io/blog/公司在你眼中算什么/</guid>
    </item>
    <item>
      <title>神器Org-mode</title>
      <link>http://lijigang.github.io/blog/神器org-mode</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>神器Org-mode</h1>
            <blockquote>
<p>
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
</p>
</blockquote>

<p>
Emacs中的 Org mode 是目前接触过的笔记管理, GTD管理以及时间记录相关的最好解决方案.
这篇文章想换种思路, 不再像其它介绍Org-mode的文章一样罗列Orgmode的一大堆功能点,
而是从使用需求出发, 一点点介绍Orgmode是如何满足这些需求的.
</p>

<p>
现在想象你打开了Emacs中的一个org文件, 想使用它做GTD管理. 首先会问: orgmode中如何
罗列一项项的Task?
</p>

<p>
答案很简单: 使用 <b>Headlines</b>.
</p>

<p>
什么是 <b>Headlines</b> ? 很简单, 使用 <code>*</code> 符号开头, 空格， 输入标题就行, 比如: 
</p>

<p class="verse">
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;* Top level headline<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<b>* Second level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;**</b> 3rd level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;some text<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<b>*</b> 3rd level<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;more text<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;* Another top level headline<br />
<br />
</p>

<p>
看着好多 <code>**</code> 符号觉得干扰视觉? 没问题, 只需要设置
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-hide-leading-stars t)
</pre>
</div>

<p>
好, 现在有了列表了. 这些Task的状态是不是可以变化? 比如「待办」「进行中」「已完成」
等?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 设置todo keywords
(setq org-todo-keywords
      '((sequence "TODO" "HAND" "|" "DONE")))
</pre>
</div>

<p>
状态关键词你自己随便定义即可, 中间流转状态根据你的实际流程来定制. 状态变更, 只需
要在Task上面按 <code>t</code> 键, 就会按你设置的状态顺序变化.
</p>

<p>
好, 现在有了列表, 也有了状态变化, 那个状态字段和任务名称并排显示, 能不能把状态值
做个样式区分, 看着更显眼些?
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 调试好久的颜色，效果超赞！ todo keywords 增加背景色
(setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                ("HAND" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))
</pre>
</div>

<p>
好, 看着还不错. 但显示的 <code>*</code> 很不个性, 这个能定制修改吗?
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 设置bullet list
(setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))
</pre>
</div>

<p>
不错不错, 但在一个任务下面输入一段文字, 怎么是顶格的, 能不能让它自动缩进对齐?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 打开org-indent mode
(setq org-startup-indented t)
</pre>
</div>

<p>
一个Task怎么设置计划开始时间和Deadline?
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">调用 org-schedule 和 org-deadline 函数

他们的快捷键 ,s 和 ,d
</pre>
</div>

<p>
那一个任务又是怎么计时的? 我想知道我在某一任务上面花了多少时间.
</p>
<pre class="example">
调用 org-clock-in 和 org-clock-out 函数

他们的快捷键 ,I 和 ,O

这俩函数就像秒表一样, 开始时打一个点, 结束时打一个点, 经历时间会自动计算显示出来.
</pre>

<p>
任务完成后, 还一直停留在当前文件中, 时间久了任务列表特别长. 对于完成的任务, 怎么归档存储?
</p>

<pre class="example">
调用 org-archive-subtree 函数, 对应的快捷键是 &lt;space o d&gt;

</pre>

<p>
怎么调整字体样式? 加粗? 斜体?
</p>

<pre class="example">
加粗 *test*
斜体 /test/
下划线 _test_
删除线 +test+
代码块 =test=
</pre>

<p>
有些时候, 需要在Task下面描述一些事项, Orgmode怎么显示 <code>plain lists</code> 列表? 
</p>

<pre class="example">
1. 这是有数字列表
2. 第二项
3. 第三项

</pre>

<pre class="example">
- 这是无数字列表
- 第二项
- 第三项
</pre>

    </div>
</section>
]]></description>
      <pubDate>2018-05-31</pubDate>
      <guid>http://lijigang.github.io/blog/神器org-mode</guid>
    </item>
    <item>
      <title>从零开始配置Spacemacs</title>
      <link>http://lijigang.github.io/blog/从零开始配置spacemacs/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>从零开始配置Spacemacs</h1>
            <p>
在我看来，在编辑操作领域，没有比Vim更高效的操作方式了。在文档存储和知识管理相关的软件使用上面，没有比Org-Mode更牛逼的存在了。
</p>

<p>
之前一直很纠结，既放不下Vim的高效编辑方式，又不放下Emacs里的Org-mode。直到遇到了Spacemacs：
</p>

<blockquote>
<p>
Spacemacs = Vim + Emacs
</p>
</blockquote>

<p>
这篇文章，就记录一下自己是怎么从零开始配置一个符合自己使用习惯的Spacemacs。
</p>

<div id="outline-container-org736f14e" class="outline-2">
<h2 id="org736f14e"><span class="section-number-2">1</span> 安装</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>安装 <a href="https://emacsformacosx.com/">Emacs</a></li>
<li>Clone Spacemacs</li>
</ol>
<pre class="example">
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
</pre>

<p>
clone完成后，会多两个东西，
</p>
<ul class="org-ul">
<li><code>~/.emacs.d/</code></li>
<li><code>~/.spacemacs</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgb6160ce" class="outline-2">
<h2 id="orgb6160ce"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
安装完成后，对于常规的配置，可以放置到 <code>~/.spacemacs</code> 文件中，就像Vim和Zsh一样。 但Spacemacs提供了 <a href="http://spacemacs.org/doc/LAYERS.html">layer</a> 概念，极大方便了插件的管理.
</p>

<p>
下面分为两部分来配置， 首先把一些简单的配置放置到 <code>~/.spacemacs</code> 文件中：
</p>
</div>

<div id="outline-container-orgf34fcc6" class="outline-3">
<h3 id="orgf34fcc6"><span class="section-number-3">2.1</span> .spacemacs</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><p>
layers
</p>

<p>
在 <code>dotspacemacs-configuration-layers</code> 变量中增加你想配置的layer(Spacemacs出厂自带的或者是你后续自己创建的）
</p></li>
</ul>
<div class="org-src-container">
<pre class="src src-Emacs-lisp">dotspacemacs-configuration-layers
'(
  helm
  auto-completion
  better-defaults
  emacs-lisp
  git
  org
  )
</pre>
</div>

<ul class="org-ul">
<li>themes
可以从 <a href="https://themegallery.robdor.com/">这里</a> 挑选你喜欢的主题，把名字放到配置的第一个即可。</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-themes '(monokai
                      molokai
                      niflheim)
</pre>
</div>

<ul class="org-ul">
<li>fullscreen</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-fullscreen-at-startup t
</pre>
</div>

<p>
在dotspacemacs/user-config函数中配置：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  ;;;;;;;;;;;;;;;;;;;;;;;
  ;; org-mode 相关设置 ;;
  ;;;;;;;;;;;;;;;;;;;;;;;

  ;; Since version 0.104, spacemacs uses the org version from the org ELPA
  ;; repository instead of the one shipped with emacs. Then, any org related
  ;; code should not be loaded before dotspacemacs/user-config, otherwise both
  ;; versions will be loaded and will conflict. Because of autoloading, calling
  ;; to org functions will trigger the loading up of the org shipped with emacs
  ;; which will induce conflicts. One way to avoid conflict is to wrap your org
  ;; config code in a with-eval-after-load block like this:
  (with-eval-after-load 'org
    ;; 设置todo keywords
    (setq org-todo-keywords
          '((sequence "TODO" "HAND" "|" "DONE")))

    ;; 调试好久的颜色，效果超赞！ todo keywords 增加背景色
    (setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                   ("HAND" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                   ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))

    ;; 设置bullet list
    (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))

    ;; 打开org-indent mode
    (setq org-startup-indented t)

    (setq org-agenda-include-diary nil)
    (setq org-agenda-files (list  "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org"
                                  "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org_archive"))

    (setq org-default-notes-file "/Users/ljg/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org")
    (setq org-refile-targets '("~/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org" :maxlevel . 3))
    )

  ;;;;;;;;;;;;;;
  ;; 显示相关 ;;
  ;;;;;;;;;;;;;;

  ;; 在状态栏显示时间
  (display-time-mode 1)

  ;; 折叠时不再显示「...」
  (setq org-ellipsis "▼")

  ;; inline image 不用展示实际大小，可以自定义大小显示
  (setq org-image-actual-width nil)

  (global-hl-line-mode -1)

  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '("" " 為學日益, 為道日損 - "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name)) "%b"))))
  ;;;;;;;;;;;;;;
  ;; 导出相关 ;;
  ;;;;;;;;;;;;;;

  ;; 安装XeLaTeX是另外一个故事了..
  (setq Tex-command-default "XeLaTeX")


  ;;;;;;;;;;;;;;
  ;; 其它杂项 ;;
  ;;;;;;;;;;;;;;

  (setq default-major-mode 'org-mode)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

  (setq org-hierarchical-todo-statistics nil)

  ;; stop emacs asking for confirmation when eval source code
  (setq org-confirm-babel-evaluate nil)

  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (plantuml . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/lib/plantuml.jar"))
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-org55f1cf9" class="outline-3">
<h3 id="org55f1cf9"><span class="section-number-3">2.2</span> private layer</h3>
<div class="outline-text-3" id="text-2-2">
<p>
首先把自己layer中想要的packages给列好, 并设置相应的启动配置项:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst lijigang-packages
  '(org-page
    cnfonts
    swiper
    wttrin
    beacon)
)

(defun lijigang/init-org-page()
  "Initialize org-page to publish blog."
  (use-package org-page
    :ensure t
    :config (progn
          (setq op/site-main-title "為學日益, 為道日損")
          (setq op/personal-github-link "https://github.com/lijigang")
          (setq op/repository-directory "~/lijigang")
          (setq op/site-domain "http://lijigang.github.io/")
          (setq op/theme-root-directory "~/.emacs.d/elpa/org-page-20170806.1924/themes")
          (setq op/theme 'ljg)
          (setq op/highlight-render 'js)
          (setq op/category-config-alist
            '(("blog"
              :show-meta t
              :show-comment t
              :uri-generator op/generate-uri
              :uri-template "/blog/%t/"
              :sort-by :date     ;; how to sort the posts
              :category-index nil) ;; generate category index or not
              ("index"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/"
              :sort-by :date
              :category-index nil)
              ("about"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/about/"
              :sort-by :date
              :category-index nil)))
          (bind-key "C-c M-p" 'op/do-publication-and-preview-site)))
    )

(defun lijigang/init-cnfonts()
  "Initialize cnfonts"
  (use-package cnfonts
    :init
    (cnfonts-enable)
    (cnfonts-set-spacemacs-fallback-fonts)))

(defun lijigang/init-swiper()
  "Initialize swiper"
  (use-package swiper
    :init
    (define-key global-map (kbd "C-s") 'swiper)))


(defun lijigang/init-wttrin()
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("Beijing"
                                  "Bristol")))
  )

(defun lijigang/init-beacon()
  "Initialize beacon"
  (use-package beacon
    :init
    (beacon-mode 1)
    (setq beacon-color "#666600")))

;;; packages.el ends here

</pre>
</div>

<p>
然后把自己定义的一些函数放到 <code>funcs.el</code> 文件:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun make-progress (width percent has-number?)
  (let* ((done (/ percent 100.0))
         (done-width (floor (* width done))))
    (concat
     "["
     (make-string done-width ?/)
     (make-string (- width done-width) ? )
     "]"
     (if has-number? (concat " " (number-to-string percent) "%"))
     )))

(defun insert-day-progress ()
  (interactive)
  (let* ((today (time-to-day-in-year (current-time)))
         (percent (floor (* 100 (/ today 365.0)))))
    (insert (make-progress 30 percent t))
    ))

;; latex支持中文
(require 'ox)
(require 'ox-html)
(require 'ox-publish)

(add-to-list 'org-latex-classes '("pdf" "\\documentclass[fontset = mac]{ctexart}
[NO-DEFAULT-PACKAGES]
\\usepackage[colorlinks,linkcolor=black,anchorcolor=black,
             citecolor=black]{hyperref}
\\usepackage[top=3truecm,bottom=2.5truecm,
            left=1.1truecm,right=1.1truecm,
            bindingoffset=1.0truecm,
            headsep=1.6truecm,
            footskip=1.5truecm,
            headheight=15pt    % 标准中没有要求页眉的高度，这里设置成
                               % 15pt了
           ]{geometry}
"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-default-class "pdf")

(setq org-latex-pdf-process
      '(
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex auto"
        ))

(defun peng-use-xelatex ()
  (interactive)
  (let* ((tempfile
      (file-name-base))) (progn (shell-command (concat "rm -rf " tempfile
                               ".bbl " tempfile ".blg " tempfile ".out " tempfile ".log " tempfile
                               ".aux " tempfile ".toc" tempfile ".pdf"))
                    (compile (concat "xelatex "
                             (concat tempfile ".tex")
                             (concat ";rm -rf " tempfile ".bbl " tempfile
                                 ".blg " tempfile ".out " tempfile ".log " tempfile ".aux " tempfile
".toc" ";open " tempfile ".pdf"))))))

</pre>
</div>

<p>
之后把自己使用的一些快捷键设置放到 <code>keybindings.el</code> :
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(evil-leader/set-key "oc" 'org-capture)
(evil-leader/set-key "oa" 'org-agenda)
(evil-leader/set-key "ol" 'org-store-link)
(evil-leader/set-key "el" 'eval-print-last-sexp)
(evil-leader/set-key "od" 'org-archive-subtree)

(evil-leader/set-key "oip" 'org-set-property)
(evil-leader/set-key "oil" 'org-insert-link)
(evil-leader/set-key "ois" 'org-time-stamp)
(evil-leader/set-key "oid" 'org-insert-drawer)
(evil-leader/set-key "oif" 'org-footnote-action)

(evil-leader/set-key "oog" (lambda () (interactive) (find-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/gtd.org")))
(evil-leader/set-key "ool" (lambda () (interactive) (find-file "/Users/ljg/.spacemacs.d/layers/lijigang/keybindings.el")))

(evil-leader/set-key "oit" 'insert-day-progress)

(global-set-key (kbd "C--") 'org-table-insert-hline)

(global-set-key
 (kbd "C-c p")
 (defhydra hydra-blog (:color blue :hint nil)
   "
    blog  _n_: new post                        _l_: publish last commit
          _r_: reset &amp; publish all             _p_: publish interactively
          _t_: reset &amp; publish to /tmp/blog    _e_: new-repository
          "
   ("n" op/new-post)
   ("r" (progn
          (setq op/item-cache nil)
          (op/do-publication t nil nil t t)))
   ("t" (progn
          (setq op/item-cache nil)
          (op/do-publication t "/tmp/blog" nil t nil)))
   ("l" (op/do-publication nil "HEAD~1" nil t t))
   ("p" op/do-publication)
   ("e" op/new-repository)))

</pre>
</div>
</div>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-05-29</pubDate>
      <guid>http://lijigang.github.io/blog/从零开始配置spacemacs/</guid>
    </item>
    <item>
      <title>使用Org-Page搭建网站</title>
      <link>http://lijigang.github.io/blog/使用org-page搭建网站/</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row post-content">
        <div class="col-md-2"></div>
            <h1>使用Org-Page搭建网站</h1>
            
<div id="outline-container-orgad31136" class="outline-2">
<h2 id="orgad31136">安装 Org-Page</h2>
<div class="outline-text-2" id="text-orgad31136">
<p>
使用 <code>Spacemacs</code> 安装Org-Page极其方便. 只需要在自己的layer中增加org-age即可:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst lijigang-packages
  '(org-page
    cnfonts
    swiper
    wttrin
    beacon)
)
</pre>
</div>
</div>
</div>

<div id="outline-container-org9706db3" class="outline-2">
<h2 id="org9706db3">配置 Org-Page</h2>
<div class="outline-text-2" id="text-org9706db3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun lijigang/init-org-page()
  "Initialize org-page to publish blog."
  (use-package org-page
    :ensure t
    :config (progn
          (setq op/site-main-title "為學日益, 為道日損")
          (setq op/personal-github-link "https://github.com/lijigang")
          (setq op/repository-directory "~/lijigang")
          (setq op/site-domain "http://lijigang.github.io/")
          (setq op/theme-root-directory "~/.emacs.d/elpa/org-page-20170806.1924/themes")
          (setq op/theme 'ljg)
          (setq op/personal-google-analytics-id "UA-49533446-2")
          (setq op/highlight-render 'js)
          (setq op/category-config-alist
            '(("blog"
              :show-meta t
              :show-comment t
              :uri-generator op/generate-uri
              :uri-template "/blog/%t/"
              :sort-by :date     ;; how to sort the posts
              :category-index nil) ;; generate category index or not
              ("index"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/"
              :sort-by :date
              :category-index nil)
              ("about"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/about/"
              :sort-by :date
              :category-index nil)))
          (bind-key "C-c M-p" 'op/do-publication-and-preview-site)))
    )
</pre>
</div>
</div>
</div>

<div id="outline-container-org222274a" class="outline-2">
<h2 id="org222274a">安装主题</h2>
<div class="outline-text-2" id="text-org222274a">
<ol class="org-ol">
<li>git clone <a href="https://github.com/lijigang/ljg">https://github.com/lijigang/ljg</a></li>

<li>cp -r ljg ~/.emacs.d/elpa/org-page-xxxx.xx/themes/</li>

<li>add (setq op/theme ‘ljg)</li>
</ol>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2018-05-29</pubDate>
      <guid>http://lijigang.github.io/blog/使用org-page搭建网站/</guid>
    </item>
  </channel>
</rss>